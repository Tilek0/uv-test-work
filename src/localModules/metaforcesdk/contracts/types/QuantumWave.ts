/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type ChipInfoStruct = {
  userId: PromiseOrValue<BigNumberish>;
  extendedShares: PromiseOrValue<BigNumberish>;
  isClaimed: PromiseOrValue<boolean>;
};

export type ChipInfoStructOutput = [BigNumber, BigNumber, boolean] & {
  userId: BigNumber;
  extendedShares: BigNumber;
  isClaimed: boolean;
};

export type MachineStruct = {
  level: PromiseOrValue<BigNumberish>;
  startShares: PromiseOrValue<BigNumberish>;
  chips: ChipInfoStruct[];
};

export type MachineStructOutput = [
  BigNumber,
  BigNumber,
  ChipInfoStructOutput[]
] & { level: BigNumber; startShares: BigNumber; chips: ChipInfoStructOutput[] };

export type WaveStruct = {
  startDate: PromiseOrValue<BigNumberish>;
  rewardOre: PromiseOrValue<BigNumberish>;
  waveTotalShares: PromiseOrValue<BigNumberish>;
  machineIds: PromiseOrValue<BigNumberish>[];
};

export type WaveStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber[]
] & {
  startDate: BigNumber;
  rewardOre: BigNumber;
  waveTotalShares: BigNumber;
  machineIds: BigNumber[];
};

export interface QuantumWaveInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "addChip(uint256,uint256,uint256[])": FunctionFragment;
    "bigBlockSize()": FunctionFragment;
    "calculateProfitForFill(uint256,uint256,uint256[],uint256[],uint256)": FunctionFragment;
    "chipQueue(uint256,uint256,uint256)": FunctionFragment;
    "chipQueueIndex(uint256,uint256)": FunctionFragment;
    "claimRewardOre(uint256,uint256,uint256[],uint256[])": FunctionFragment;
    "eqnAmountToExtendOneShare()": FunctionFragment;
    "extendChipBatch(uint256,uint256[],uint256[],uint256)": FunctionFragment;
    "fillWave(uint256,uint256[],uint256[],uint256)": FunctionFragment;
    "getChipInfo(uint256,uint256)": FunctionFragment;
    "getLengthChipsInMachine(uint256)": FunctionFragment;
    "getMachineInfo(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getTimestampEndPack(uint256,uint256)": FunctionFragment;
    "getUserRewardOre(uint256,uint256,uint256[],uint256[])": FunctionFragment;
    "getWaveInfo(uint256)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "machineIdForLevel(uint256)": FunctionFragment;
    "machines(uint256)": FunctionFragment;
    "meanSmallBlock()": FunctionFragment;
    "needChipsForMachines(uint256)": FunctionFragment;
    "needMachines()": FunctionFragment;
    "nextMachineId()": FunctionFragment;
    "nextWaveId()": FunctionFragment;
    "nextWaveRewardOre()": FunctionFragment;
    "nowNumberBigBlock()": FunctionFragment;
    "nowNumberSmallBlock()": FunctionFragment;
    "qenAmountToFill()": FunctionFragment;
    "quantumWaveFund()": FunctionFragment;
    "quantumWaves(uint256)": FunctionFragment;
    "registry()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setNeedChipsForMachines(uint256[])": FunctionFragment;
    "setNeedMachines(uint256)": FunctionFragment;
    "setQuantumWaveFund(address)": FunctionFragment;
    "setWaveActivePeriod(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "userLastChipInQueue(uint256,uint256)": FunctionFragment;
    "userWaveFilledAmount(uint256,uint256)": FunctionFragment;
    "userWaveParticipationTimestamp(uint256,uint256)": FunctionFragment;
    "waveActivePeriod()": FunctionFragment;
    "waveIdForMachine(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "addChip"
      | "bigBlockSize"
      | "calculateProfitForFill"
      | "chipQueue"
      | "chipQueueIndex"
      | "claimRewardOre"
      | "eqnAmountToExtendOneShare"
      | "extendChipBatch"
      | "fillWave"
      | "getChipInfo"
      | "getLengthChipsInMachine"
      | "getMachineInfo"
      | "getRoleAdmin"
      | "getTimestampEndPack"
      | "getUserRewardOre"
      | "getWaveInfo"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "machineIdForLevel"
      | "machines"
      | "meanSmallBlock"
      | "needChipsForMachines"
      | "needMachines"
      | "nextMachineId"
      | "nextWaveId"
      | "nextWaveRewardOre"
      | "nowNumberBigBlock"
      | "nowNumberSmallBlock"
      | "qenAmountToFill"
      | "quantumWaveFund"
      | "quantumWaves"
      | "registry"
      | "renounceRole"
      | "revokeRole"
      | "setNeedChipsForMachines"
      | "setNeedMachines"
      | "setQuantumWaveFund"
      | "setWaveActivePeriod"
      | "supportsInterface"
      | "userLastChipInQueue"
      | "userWaveFilledAmount"
      | "userWaveParticipationTimestamp"
      | "waveActivePeriod"
      | "waveIdForMachine"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addChip",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bigBlockSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateProfitForFill",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "chipQueue",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "chipQueueIndex",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewardOre",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "eqnAmountToExtendOneShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extendChipBatch",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillWave",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getChipInfo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLengthChipsInMachine",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMachineInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimestampEndPack",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRewardOre",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getWaveInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "machineIdForLevel",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "machines",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "meanSmallBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "needChipsForMachines",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "needMachines",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextMachineId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextWaveId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextWaveRewardOre",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nowNumberBigBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nowNumberSmallBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "qenAmountToFill",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quantumWaveFund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quantumWaves",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setNeedChipsForMachines",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setNeedMachines",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setQuantumWaveFund",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWaveActivePeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "userLastChipInQueue",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userWaveFilledAmount",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userWaveParticipationTimestamp",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "waveActivePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "waveIdForMachine",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addChip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bigBlockSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateProfitForFill",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chipQueue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "chipQueueIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewardOre",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eqnAmountToExtendOneShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extendChipBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fillWave", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getChipInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLengthChipsInMachine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMachineInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimestampEndPack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRewardOre",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWaveInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "machineIdForLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "machines", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "meanSmallBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "needChipsForMachines",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "needMachines",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextMachineId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextWaveId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextWaveRewardOre",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nowNumberBigBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nowNumberSmallBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "qenAmountToFill",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quantumWaveFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quantumWaves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNeedChipsForMachines",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNeedMachines",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setQuantumWaveFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWaveActivePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userLastChipInQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userWaveFilledAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userWaveParticipationTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "waveActivePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "waveIdForMachine",
    data: BytesLike
  ): Result;

  events: {
    "AddChipFromQueueToMachine(uint256,uint256)": EventFragment;
    "AddChipInQueue(uint256,uint256,uint256,uint256)": EventFragment;
    "AddToMachine(uint256,uint256,uint256,uint256)": EventFragment;
    "BigBlockMove(uint256)": EventFragment;
    "ChipExtended(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MachineComplete(uint256,uint256)": EventFragment;
    "QuantumWaveStart(uint256,uint256)": EventFragment;
    "RewardOreClaimed(uint256,uint256,uint256[],uint256[],uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SmallBlockMove(uint256)": EventFragment;
    "WaveFilled(uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddChipFromQueueToMachine"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddChipInQueue"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddToMachine"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BigBlockMove"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChipExtended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MachineComplete"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuantumWaveStart"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardOreClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SmallBlockMove"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WaveFilled"): EventFragment;
}

export interface AddChipFromQueueToMachineEventObject {
  userId: BigNumber;
  chipLevel: BigNumber;
}
export type AddChipFromQueueToMachineEvent = TypedEvent<
  [BigNumber, BigNumber],
  AddChipFromQueueToMachineEventObject
>;

export type AddChipFromQueueToMachineEventFilter =
  TypedEventFilter<AddChipFromQueueToMachineEvent>;

export interface AddChipInQueueEventObject {
  userId: BigNumber;
  date: BigNumber;
  chipLevel: BigNumber;
  capacity: BigNumber;
}
export type AddChipInQueueEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  AddChipInQueueEventObject
>;

export type AddChipInQueueEventFilter = TypedEventFilter<AddChipInQueueEvent>;

export interface AddToMachineEventObject {
  machineId: BigNumber;
  userId: BigNumber;
  level: BigNumber;
  chipIndex: BigNumber;
}
export type AddToMachineEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  AddToMachineEventObject
>;

export type AddToMachineEventFilter = TypedEventFilter<AddToMachineEvent>;

export interface BigBlockMoveEventObject {
  nowNumberBigBlock: BigNumber;
}
export type BigBlockMoveEvent = TypedEvent<
  [BigNumber],
  BigBlockMoveEventObject
>;

export type BigBlockMoveEventFilter = TypedEventFilter<BigBlockMoveEvent>;

export interface ChipExtendedEventObject {
  userId: BigNumber;
  waveId: BigNumber;
  machineId: BigNumber;
  chipIndex: BigNumber;
  extendShare: BigNumber;
}
export type ChipExtendedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  ChipExtendedEventObject
>;

export type ChipExtendedEventFilter = TypedEventFilter<ChipExtendedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MachineCompleteEventObject {
  waveId: BigNumber;
  machineId: BigNumber;
}
export type MachineCompleteEvent = TypedEvent<
  [BigNumber, BigNumber],
  MachineCompleteEventObject
>;

export type MachineCompleteEventFilter = TypedEventFilter<MachineCompleteEvent>;

export interface QuantumWaveStartEventObject {
  waveId: BigNumber;
  rewardOre: BigNumber;
}
export type QuantumWaveStartEvent = TypedEvent<
  [BigNumber, BigNumber],
  QuantumWaveStartEventObject
>;

export type QuantumWaveStartEventFilter =
  TypedEventFilter<QuantumWaveStartEvent>;

export interface RewardOreClaimedEventObject {
  userId: BigNumber;
  waveId: BigNumber;
  machineIds: BigNumber[];
  chipIndexes: BigNumber[];
  rewardAmount: BigNumber;
  missedRewardAmount: BigNumber;
}
export type RewardOreClaimedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber[], BigNumber[], BigNumber, BigNumber],
  RewardOreClaimedEventObject
>;

export type RewardOreClaimedEventFilter =
  TypedEventFilter<RewardOreClaimedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SmallBlockMoveEventObject {
  nowNumberSmallBlock: BigNumber;
}
export type SmallBlockMoveEvent = TypedEvent<
  [BigNumber],
  SmallBlockMoveEventObject
>;

export type SmallBlockMoveEventFilter = TypedEventFilter<SmallBlockMoveEvent>;

export interface WaveFilledEventObject {
  userId: BigNumber;
  waveId: BigNumber;
  filledAmount: BigNumber;
}
export type WaveFilledEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  WaveFilledEventObject
>;

export type WaveFilledEventFilter = TypedEventFilter<WaveFilledEvent>;

export interface QuantumWave extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: QuantumWaveInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addChip(
      chipLevel: PromiseOrValue<BigNumberish>,
      userId: PromiseOrValue<BigNumberish>,
      chipIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bigBlockSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateProfitForFill(
      userId: PromiseOrValue<BigNumberish>,
      waveId: PromiseOrValue<BigNumberish>,
      machineIds: PromiseOrValue<BigNumberish>[],
      chipIndexes: PromiseOrValue<BigNumberish>[],
      fillAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { approximateReward: BigNumber }>;

    chipQueue(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { userId: BigNumber; startShare: BigNumber }
    >;

    chipQueueIndex(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimRewardOre(
      userId: PromiseOrValue<BigNumberish>,
      waveId: PromiseOrValue<BigNumberish>,
      machineIds: PromiseOrValue<BigNumberish>[],
      chipIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    eqnAmountToExtendOneShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    extendChipBatch(
      waveId: PromiseOrValue<BigNumberish>,
      machineIds: PromiseOrValue<BigNumberish>[],
      chipIndexes: PromiseOrValue<BigNumberish>[],
      totalExtendAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fillWave(
      waveId: PromiseOrValue<BigNumberish>,
      machineIds: PromiseOrValue<BigNumberish>[],
      chipIndexes: PromiseOrValue<BigNumberish>[],
      fillAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getChipInfo(
      machineId: PromiseOrValue<BigNumberish>,
      chipIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ChipInfoStructOutput]>;

    getLengthChipsInMachine(
      machineId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMachineInfo(
      machineId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[MachineStructOutput]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTimestampEndPack(
      userId: PromiseOrValue<BigNumberish>,
      level: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserRewardOre(
      userId: PromiseOrValue<BigNumberish>,
      waveId: PromiseOrValue<BigNumberish>,
      machineIds: PromiseOrValue<BigNumberish>[],
      chipIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        rewardOre: BigNumber;
        missedRewardOre: BigNumber;
      }
    >;

    getWaveInfo(
      waveId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[WaveStructOutput]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    machineIdForLevel(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    machines(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { level: BigNumber; startShares: BigNumber }
    >;

    meanSmallBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    needChipsForMachines(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    needMachines(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextMachineId(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextWaveId(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextWaveRewardOre(overrides?: CallOverrides): Promise<[BigNumber]>;

    nowNumberBigBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    nowNumberSmallBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    qenAmountToFill(overrides?: CallOverrides): Promise<[BigNumber]>;

    quantumWaveFund(overrides?: CallOverrides): Promise<[string]>;

    quantumWaves(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        startDate: BigNumber;
        rewardOre: BigNumber;
        waveTotalShares: BigNumber;
      }
    >;

    registry(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNeedChipsForMachines(
      _needChipsForMachines: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNeedMachines(
      _needMachines: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setQuantumWaveFund(
      _quantumWaveFund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWaveActivePeriod(
      _waveActivePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    userLastChipInQueue(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userWaveFilledAmount(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userWaveParticipationTimestamp(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    waveActivePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    waveIdForMachine(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  addChip(
    chipLevel: PromiseOrValue<BigNumberish>,
    userId: PromiseOrValue<BigNumberish>,
    chipIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bigBlockSize(overrides?: CallOverrides): Promise<BigNumber>;

  calculateProfitForFill(
    userId: PromiseOrValue<BigNumberish>,
    waveId: PromiseOrValue<BigNumberish>,
    machineIds: PromiseOrValue<BigNumberish>[],
    chipIndexes: PromiseOrValue<BigNumberish>[],
    fillAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  chipQueue(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { userId: BigNumber; startShare: BigNumber }
  >;

  chipQueueIndex(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimRewardOre(
    userId: PromiseOrValue<BigNumberish>,
    waveId: PromiseOrValue<BigNumberish>,
    machineIds: PromiseOrValue<BigNumberish>[],
    chipIndexes: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  eqnAmountToExtendOneShare(overrides?: CallOverrides): Promise<BigNumber>;

  extendChipBatch(
    waveId: PromiseOrValue<BigNumberish>,
    machineIds: PromiseOrValue<BigNumberish>[],
    chipIndexes: PromiseOrValue<BigNumberish>[],
    totalExtendAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fillWave(
    waveId: PromiseOrValue<BigNumberish>,
    machineIds: PromiseOrValue<BigNumberish>[],
    chipIndexes: PromiseOrValue<BigNumberish>[],
    fillAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getChipInfo(
    machineId: PromiseOrValue<BigNumberish>,
    chipIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ChipInfoStructOutput>;

  getLengthChipsInMachine(
    machineId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMachineInfo(
    machineId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<MachineStructOutput>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTimestampEndPack(
    userId: PromiseOrValue<BigNumberish>,
    level: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserRewardOre(
    userId: PromiseOrValue<BigNumberish>,
    waveId: PromiseOrValue<BigNumberish>,
    machineIds: PromiseOrValue<BigNumberish>[],
    chipIndexes: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      rewardOre: BigNumber;
      missedRewardOre: BigNumber;
    }
  >;

  getWaveInfo(
    waveId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<WaveStructOutput>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _registry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  machineIdForLevel(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  machines(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { level: BigNumber; startShares: BigNumber }
  >;

  meanSmallBlock(overrides?: CallOverrides): Promise<BigNumber>;

  needChipsForMachines(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  needMachines(overrides?: CallOverrides): Promise<BigNumber>;

  nextMachineId(overrides?: CallOverrides): Promise<BigNumber>;

  nextWaveId(overrides?: CallOverrides): Promise<BigNumber>;

  nextWaveRewardOre(overrides?: CallOverrides): Promise<BigNumber>;

  nowNumberBigBlock(overrides?: CallOverrides): Promise<BigNumber>;

  nowNumberSmallBlock(overrides?: CallOverrides): Promise<BigNumber>;

  qenAmountToFill(overrides?: CallOverrides): Promise<BigNumber>;

  quantumWaveFund(overrides?: CallOverrides): Promise<string>;

  quantumWaves(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      startDate: BigNumber;
      rewardOre: BigNumber;
      waveTotalShares: BigNumber;
    }
  >;

  registry(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNeedChipsForMachines(
    _needChipsForMachines: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNeedMachines(
    _needMachines: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setQuantumWaveFund(
    _quantumWaveFund: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWaveActivePeriod(
    _waveActivePeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  userLastChipInQueue(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userWaveFilledAmount(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userWaveParticipationTimestamp(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  waveActivePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  waveIdForMachine(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    addChip(
      chipLevel: PromiseOrValue<BigNumberish>,
      userId: PromiseOrValue<BigNumberish>,
      chipIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    bigBlockSize(overrides?: CallOverrides): Promise<BigNumber>;

    calculateProfitForFill(
      userId: PromiseOrValue<BigNumberish>,
      waveId: PromiseOrValue<BigNumberish>,
      machineIds: PromiseOrValue<BigNumberish>[],
      chipIndexes: PromiseOrValue<BigNumberish>[],
      fillAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chipQueue(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { userId: BigNumber; startShare: BigNumber }
    >;

    chipQueueIndex(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimRewardOre(
      userId: PromiseOrValue<BigNumberish>,
      waveId: PromiseOrValue<BigNumberish>,
      machineIds: PromiseOrValue<BigNumberish>[],
      chipIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    eqnAmountToExtendOneShare(overrides?: CallOverrides): Promise<BigNumber>;

    extendChipBatch(
      waveId: PromiseOrValue<BigNumberish>,
      machineIds: PromiseOrValue<BigNumberish>[],
      chipIndexes: PromiseOrValue<BigNumberish>[],
      totalExtendAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fillWave(
      waveId: PromiseOrValue<BigNumberish>,
      machineIds: PromiseOrValue<BigNumberish>[],
      chipIndexes: PromiseOrValue<BigNumberish>[],
      fillAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getChipInfo(
      machineId: PromiseOrValue<BigNumberish>,
      chipIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ChipInfoStructOutput>;

    getLengthChipsInMachine(
      machineId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMachineInfo(
      machineId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<MachineStructOutput>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTimestampEndPack(
      userId: PromiseOrValue<BigNumberish>,
      level: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserRewardOre(
      userId: PromiseOrValue<BigNumberish>,
      waveId: PromiseOrValue<BigNumberish>,
      machineIds: PromiseOrValue<BigNumberish>[],
      chipIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        rewardOre: BigNumber;
        missedRewardOre: BigNumber;
      }
    >;

    getWaveInfo(
      waveId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<WaveStructOutput>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _registry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    machineIdForLevel(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    machines(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { level: BigNumber; startShares: BigNumber }
    >;

    meanSmallBlock(overrides?: CallOverrides): Promise<BigNumber>;

    needChipsForMachines(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    needMachines(overrides?: CallOverrides): Promise<BigNumber>;

    nextMachineId(overrides?: CallOverrides): Promise<BigNumber>;

    nextWaveId(overrides?: CallOverrides): Promise<BigNumber>;

    nextWaveRewardOre(overrides?: CallOverrides): Promise<BigNumber>;

    nowNumberBigBlock(overrides?: CallOverrides): Promise<BigNumber>;

    nowNumberSmallBlock(overrides?: CallOverrides): Promise<BigNumber>;

    qenAmountToFill(overrides?: CallOverrides): Promise<BigNumber>;

    quantumWaveFund(overrides?: CallOverrides): Promise<string>;

    quantumWaves(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        startDate: BigNumber;
        rewardOre: BigNumber;
        waveTotalShares: BigNumber;
      }
    >;

    registry(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setNeedChipsForMachines(
      _needChipsForMachines: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setNeedMachines(
      _needMachines: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setQuantumWaveFund(
      _quantumWaveFund: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWaveActivePeriod(
      _waveActivePeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userLastChipInQueue(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userWaveFilledAmount(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userWaveParticipationTimestamp(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    waveActivePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    waveIdForMachine(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AddChipFromQueueToMachine(uint256,uint256)"(
      userId?: PromiseOrValue<BigNumberish> | null,
      chipLevel?: null
    ): AddChipFromQueueToMachineEventFilter;
    AddChipFromQueueToMachine(
      userId?: PromiseOrValue<BigNumberish> | null,
      chipLevel?: null
    ): AddChipFromQueueToMachineEventFilter;

    "AddChipInQueue(uint256,uint256,uint256,uint256)"(
      userId?: PromiseOrValue<BigNumberish> | null,
      date?: PromiseOrValue<BigNumberish> | null,
      chipLevel?: PromiseOrValue<BigNumberish> | null,
      capacity?: null
    ): AddChipInQueueEventFilter;
    AddChipInQueue(
      userId?: PromiseOrValue<BigNumberish> | null,
      date?: PromiseOrValue<BigNumberish> | null,
      chipLevel?: PromiseOrValue<BigNumberish> | null,
      capacity?: null
    ): AddChipInQueueEventFilter;

    "AddToMachine(uint256,uint256,uint256,uint256)"(
      machineId?: PromiseOrValue<BigNumberish> | null,
      userId?: PromiseOrValue<BigNumberish> | null,
      level?: PromiseOrValue<BigNumberish> | null,
      chipIndex?: null
    ): AddToMachineEventFilter;
    AddToMachine(
      machineId?: PromiseOrValue<BigNumberish> | null,
      userId?: PromiseOrValue<BigNumberish> | null,
      level?: PromiseOrValue<BigNumberish> | null,
      chipIndex?: null
    ): AddToMachineEventFilter;

    "BigBlockMove(uint256)"(nowNumberBigBlock?: null): BigBlockMoveEventFilter;
    BigBlockMove(nowNumberBigBlock?: null): BigBlockMoveEventFilter;

    "ChipExtended(uint256,uint256,uint256,uint256,uint256)"(
      userId?: PromiseOrValue<BigNumberish> | null,
      waveId?: PromiseOrValue<BigNumberish> | null,
      machineId?: PromiseOrValue<BigNumberish> | null,
      chipIndex?: null,
      extendShare?: null
    ): ChipExtendedEventFilter;
    ChipExtended(
      userId?: PromiseOrValue<BigNumberish> | null,
      waveId?: PromiseOrValue<BigNumberish> | null,
      machineId?: PromiseOrValue<BigNumberish> | null,
      chipIndex?: null,
      extendShare?: null
    ): ChipExtendedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MachineComplete(uint256,uint256)"(
      waveId?: PromiseOrValue<BigNumberish> | null,
      machineId?: null
    ): MachineCompleteEventFilter;
    MachineComplete(
      waveId?: PromiseOrValue<BigNumberish> | null,
      machineId?: null
    ): MachineCompleteEventFilter;

    "QuantumWaveStart(uint256,uint256)"(
      waveId?: null,
      rewardOre?: null
    ): QuantumWaveStartEventFilter;
    QuantumWaveStart(
      waveId?: null,
      rewardOre?: null
    ): QuantumWaveStartEventFilter;

    "RewardOreClaimed(uint256,uint256,uint256[],uint256[],uint256,uint256)"(
      userId?: PromiseOrValue<BigNumberish> | null,
      waveId?: PromiseOrValue<BigNumberish> | null,
      machineIds?: null,
      chipIndexes?: null,
      rewardAmount?: null,
      missedRewardAmount?: null
    ): RewardOreClaimedEventFilter;
    RewardOreClaimed(
      userId?: PromiseOrValue<BigNumberish> | null,
      waveId?: PromiseOrValue<BigNumberish> | null,
      machineIds?: null,
      chipIndexes?: null,
      rewardAmount?: null,
      missedRewardAmount?: null
    ): RewardOreClaimedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "SmallBlockMove(uint256)"(
      nowNumberSmallBlock?: null
    ): SmallBlockMoveEventFilter;
    SmallBlockMove(nowNumberSmallBlock?: null): SmallBlockMoveEventFilter;

    "WaveFilled(uint256,uint256,uint256)"(
      userId?: PromiseOrValue<BigNumberish> | null,
      waveId?: PromiseOrValue<BigNumberish> | null,
      filledAmount?: null
    ): WaveFilledEventFilter;
    WaveFilled(
      userId?: PromiseOrValue<BigNumberish> | null,
      waveId?: PromiseOrValue<BigNumberish> | null,
      filledAmount?: null
    ): WaveFilledEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addChip(
      chipLevel: PromiseOrValue<BigNumberish>,
      userId: PromiseOrValue<BigNumberish>,
      chipIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bigBlockSize(overrides?: CallOverrides): Promise<BigNumber>;

    calculateProfitForFill(
      userId: PromiseOrValue<BigNumberish>,
      waveId: PromiseOrValue<BigNumberish>,
      machineIds: PromiseOrValue<BigNumberish>[],
      chipIndexes: PromiseOrValue<BigNumberish>[],
      fillAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chipQueue(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chipQueueIndex(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimRewardOre(
      userId: PromiseOrValue<BigNumberish>,
      waveId: PromiseOrValue<BigNumberish>,
      machineIds: PromiseOrValue<BigNumberish>[],
      chipIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    eqnAmountToExtendOneShare(overrides?: CallOverrides): Promise<BigNumber>;

    extendChipBatch(
      waveId: PromiseOrValue<BigNumberish>,
      machineIds: PromiseOrValue<BigNumberish>[],
      chipIndexes: PromiseOrValue<BigNumberish>[],
      totalExtendAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fillWave(
      waveId: PromiseOrValue<BigNumberish>,
      machineIds: PromiseOrValue<BigNumberish>[],
      chipIndexes: PromiseOrValue<BigNumberish>[],
      fillAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getChipInfo(
      machineId: PromiseOrValue<BigNumberish>,
      chipIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLengthChipsInMachine(
      machineId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMachineInfo(
      machineId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimestampEndPack(
      userId: PromiseOrValue<BigNumberish>,
      level: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserRewardOre(
      userId: PromiseOrValue<BigNumberish>,
      waveId: PromiseOrValue<BigNumberish>,
      machineIds: PromiseOrValue<BigNumberish>[],
      chipIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWaveInfo(
      waveId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    machineIdForLevel(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    machines(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    meanSmallBlock(overrides?: CallOverrides): Promise<BigNumber>;

    needChipsForMachines(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    needMachines(overrides?: CallOverrides): Promise<BigNumber>;

    nextMachineId(overrides?: CallOverrides): Promise<BigNumber>;

    nextWaveId(overrides?: CallOverrides): Promise<BigNumber>;

    nextWaveRewardOre(overrides?: CallOverrides): Promise<BigNumber>;

    nowNumberBigBlock(overrides?: CallOverrides): Promise<BigNumber>;

    nowNumberSmallBlock(overrides?: CallOverrides): Promise<BigNumber>;

    qenAmountToFill(overrides?: CallOverrides): Promise<BigNumber>;

    quantumWaveFund(overrides?: CallOverrides): Promise<BigNumber>;

    quantumWaves(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNeedChipsForMachines(
      _needChipsForMachines: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNeedMachines(
      _needMachines: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setQuantumWaveFund(
      _quantumWaveFund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWaveActivePeriod(
      _waveActivePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userLastChipInQueue(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userWaveFilledAmount(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userWaveParticipationTimestamp(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    waveActivePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    waveIdForMachine(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addChip(
      chipLevel: PromiseOrValue<BigNumberish>,
      userId: PromiseOrValue<BigNumberish>,
      chipIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bigBlockSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateProfitForFill(
      userId: PromiseOrValue<BigNumberish>,
      waveId: PromiseOrValue<BigNumberish>,
      machineIds: PromiseOrValue<BigNumberish>[],
      chipIndexes: PromiseOrValue<BigNumberish>[],
      fillAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chipQueue(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chipQueueIndex(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimRewardOre(
      userId: PromiseOrValue<BigNumberish>,
      waveId: PromiseOrValue<BigNumberish>,
      machineIds: PromiseOrValue<BigNumberish>[],
      chipIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    eqnAmountToExtendOneShare(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    extendChipBatch(
      waveId: PromiseOrValue<BigNumberish>,
      machineIds: PromiseOrValue<BigNumberish>[],
      chipIndexes: PromiseOrValue<BigNumberish>[],
      totalExtendAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fillWave(
      waveId: PromiseOrValue<BigNumberish>,
      machineIds: PromiseOrValue<BigNumberish>[],
      chipIndexes: PromiseOrValue<BigNumberish>[],
      fillAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getChipInfo(
      machineId: PromiseOrValue<BigNumberish>,
      chipIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLengthChipsInMachine(
      machineId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMachineInfo(
      machineId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimestampEndPack(
      userId: PromiseOrValue<BigNumberish>,
      level: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserRewardOre(
      userId: PromiseOrValue<BigNumberish>,
      waveId: PromiseOrValue<BigNumberish>,
      machineIds: PromiseOrValue<BigNumberish>[],
      chipIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWaveInfo(
      waveId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    machineIdForLevel(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    machines(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    meanSmallBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    needChipsForMachines(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    needMachines(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextMachineId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextWaveId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextWaveRewardOre(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nowNumberBigBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nowNumberSmallBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    qenAmountToFill(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quantumWaveFund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quantumWaves(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNeedChipsForMachines(
      _needChipsForMachines: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNeedMachines(
      _needMachines: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setQuantumWaveFund(
      _quantumWaveFund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWaveActivePeriod(
      _waveActivePeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userLastChipInQueue(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userWaveFilledAmount(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userWaveParticipationTimestamp(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    waveActivePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    waveIdForMachine(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
