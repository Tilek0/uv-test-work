/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ClassicInterface extends utils.Interface {
  functions: {
    "CORE_ADDRESS()": FunctionFragment;
    "SFC()": FunctionFragment;
    "SFCR()": FunctionFragment;
    "accountLevels(address)": FunctionFragment;
    "activate(address,uint256)": FunctionFragment;
    "addFrozenMoneyS3(uint256,uint256)": FunctionFragment;
    "addFrozenMoneyS6(uint256,uint256)": FunctionFragment;
    "buy(uint256)": FunctionFragment;
    "changeAddress(address)": FunctionFragment;
    "changeAutoReCycle(uint256)": FunctionFragment;
    "changeAutoUpgrade(uint256)": FunctionFragment;
    "changeSFCR(address)": FunctionFragment;
    "childs(address,uint256)": FunctionFragment;
    "childsS3(address,uint256,uint256)": FunctionFragment;
    "childsS6Lvl1(address,uint256,uint256)": FunctionFragment;
    "childsS6Lvl2(address,uint256,uint256)": FunctionFragment;
    "currentDecimals()": FunctionFragment;
    "currentStartPrice()": FunctionFragment;
    "delegateCall(address)": FunctionFragment;
    "getActivateParent(address,uint256)": FunctionFragment;
    "getCoreAddress()": FunctionFragment;
    "getLevel(address)": FunctionFragment;
    "getSettings(address,uint256)": FunctionFragment;
    "getUsersChildsRow1(address,uint256)": FunctionFragment;
    "getUsersChildsRow2(address,uint256)": FunctionFragment;
    "getUsersChildsS3(address,uint256)": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "marketingParents(address,uint256)": FunctionFragment;
    "matrixS3(address,uint256)": FunctionFragment;
    "matrixS6(address,uint256)": FunctionFragment;
    "navigator(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "parent(address)": FunctionFragment;
    "permissionToChangePresence(address)": FunctionFragment;
    "prices(uint256)": FunctionFragment;
    "products(uint256)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "registration(address)": FunctionFragment;
    "registrationTime(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "s_currentTokenIndex()": FunctionFragment;
    "s_innerFund()": FunctionFragment;
    "s_productFund()": FunctionFragment;
    "setCoreAddress(address)": FunctionFragment;
    "setInnerFund(address)": FunctionFragment;
    "setNewPrice(uint256)": FunctionFragment;
    "setProductFund(address)": FunctionFragment;
    "setSFC(address)": FunctionFragment;
    "setToken(address,uint256)": FunctionFragment;
    "tokens(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "withdraw()": FunctionFragment;
    "withdrawForce(address,uint256,uint256)": FunctionFragment;
    "withdrawS3(uint256)": FunctionFragment;
    "withdrawS6(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CORE_ADDRESS"
      | "SFC"
      | "SFCR"
      | "accountLevels"
      | "activate"
      | "addFrozenMoneyS3"
      | "addFrozenMoneyS6"
      | "buy"
      | "changeAddress"
      | "changeAutoReCycle"
      | "changeAutoUpgrade"
      | "changeSFCR"
      | "childs"
      | "childsS3"
      | "childsS6Lvl1"
      | "childsS6Lvl2"
      | "currentDecimals"
      | "currentStartPrice"
      | "delegateCall"
      | "getActivateParent"
      | "getCoreAddress"
      | "getLevel"
      | "getSettings"
      | "getUsersChildsRow1"
      | "getUsersChildsRow2"
      | "getUsersChildsS3"
      | "initialize"
      | "marketingParents"
      | "matrixS3"
      | "matrixS6"
      | "navigator"
      | "owner"
      | "parent"
      | "permissionToChangePresence"
      | "prices"
      | "products"
      | "proxiableUUID"
      | "registration"
      | "registrationTime"
      | "renounceOwnership"
      | "s_currentTokenIndex"
      | "s_innerFund"
      | "s_productFund"
      | "setCoreAddress"
      | "setInnerFund"
      | "setNewPrice"
      | "setProductFund"
      | "setSFC"
      | "setToken"
      | "tokens"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "withdraw"
      | "withdrawForce"
      | "withdrawS3"
      | "withdrawS6"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CORE_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "SFC", values?: undefined): string;
  encodeFunctionData(functionFragment: "SFCR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accountLevels",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "activate",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addFrozenMoneyS3",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addFrozenMoneyS6",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeAutoReCycle",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeAutoUpgrade",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSFCR",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "childs",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "childsS3",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "childsS6Lvl1",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "childsS6Lvl2",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "currentDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentStartPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delegateCall",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getActivateParent",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCoreAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLevel",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSettings",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUsersChildsRow1",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUsersChildsRow2",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUsersChildsS3",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "marketingParents",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "matrixS3",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "matrixS6",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "navigator",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "parent",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "permissionToChangePresence",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "prices",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "products",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registration",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registrationTime",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_currentTokenIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_innerFund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_productFund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCoreAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setInnerFund",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setNewPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProductFund",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSFC",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setToken",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawForce",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawS3",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawS6",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "CORE_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SFC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SFCR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accountLevels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "activate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addFrozenMoneyS3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addFrozenMoneyS6",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeAutoReCycle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeAutoUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeSFCR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "childs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "childsS3", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "childsS6Lvl1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "childsS6Lvl2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentStartPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActivateParent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCoreAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLevel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUsersChildsRow1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUsersChildsRow2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUsersChildsS3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketingParents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "matrixS3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "matrixS6", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "navigator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "parent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permissionToChangePresence",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "prices", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "products", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registrationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_currentTokenIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_innerFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_productFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCoreAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInnerFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNewPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProductFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSFC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawForce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdrawS3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdrawS6", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "AllFundsWithdrawn(address,uint256,uint256)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "FundsWithdrawn(address,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "InnerFundSetted(address)": EventFragment;
    "LastChildChanged(address,uint64,uint256,bool,bool)": EventFragment;
    "MarketingParentChanged(address,address,uint256)": EventFragment;
    "NavigatorChanged(address,address,uint128,uint128,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProductFundSetted(address)": EventFragment;
    "SFCRChanged(address)": EventFragment;
    "SFCSetted(address)": EventFragment;
    "TokenSetted(address)": EventFragment;
    "Upgraded(address)": EventFragment;
    "UserDeleted(address,address,uint256,uint256)": EventFragment;
    "UserDrawn(address,address,uint256,uint256,bool)": EventFragment;
    "UsserChanged(address,address)": EventFragment;
    "simpleBuy(address,address,uint256)": EventFragment;
    "tokenAreWithdrawnByOwner(address,uint256,uint256)": EventFragment;
    "updateOtherPersonStructure(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AllFundsWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InnerFundSetted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LastChildChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketingParentChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NavigatorChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductFundSetted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SFCRChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SFCSetted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenSetted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserDrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UsserChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "simpleBuy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "tokenAreWithdrawnByOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "updateOtherPersonStructure"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface AllFundsWithdrawnEventObject {
  to: string;
  amount: BigNumber;
  tokenIndex: BigNumber;
}
export type AllFundsWithdrawnEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  AllFundsWithdrawnEventObject
>;

export type AllFundsWithdrawnEventFilter =
  TypedEventFilter<AllFundsWithdrawnEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface FundsWithdrawnEventObject {
  to: string;
  level: BigNumber;
  amount: BigNumber;
}
export type FundsWithdrawnEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  FundsWithdrawnEventObject
>;

export type FundsWithdrawnEventFilter = TypedEventFilter<FundsWithdrawnEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface InnerFundSettedEventObject {
  innerFund: string;
}
export type InnerFundSettedEvent = TypedEvent<
  [string],
  InnerFundSettedEventObject
>;

export type InnerFundSettedEventFilter = TypedEventFilter<InnerFundSettedEvent>;

export interface LastChildChangedEventObject {
  targetUser: string;
  amount: BigNumber;
  lvl: BigNumber;
  raw: boolean;
  isPositive: boolean;
}
export type LastChildChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber, boolean, boolean],
  LastChildChangedEventObject
>;

export type LastChildChangedEventFilter =
  TypedEventFilter<LastChildChangedEvent>;

export interface MarketingParentChangedEventObject {
  targetUser: string;
  newParent: string;
  lvl: BigNumber;
}
export type MarketingParentChangedEvent = TypedEvent<
  [string, string, BigNumber],
  MarketingParentChangedEventObject
>;

export type MarketingParentChangedEventFilter =
  TypedEventFilter<MarketingParentChangedEvent>;

export interface NavigatorChangedEventObject {
  structureOwner: string;
  deletedUser: string;
  lvl: BigNumber;
  slot: BigNumber;
  raw: boolean;
}
export type NavigatorChangedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, boolean],
  NavigatorChangedEventObject
>;

export type NavigatorChangedEventFilter =
  TypedEventFilter<NavigatorChangedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ProductFundSettedEventObject {
  productFund: string;
}
export type ProductFundSettedEvent = TypedEvent<
  [string],
  ProductFundSettedEventObject
>;

export type ProductFundSettedEventFilter =
  TypedEventFilter<ProductFundSettedEvent>;

export interface SFCRChangedEventObject {
  newSFCR: string;
}
export type SFCRChangedEvent = TypedEvent<[string], SFCRChangedEventObject>;

export type SFCRChangedEventFilter = TypedEventFilter<SFCRChangedEvent>;

export interface SFCSettedEventObject {
  newToken: string;
}
export type SFCSettedEvent = TypedEvent<[string], SFCSettedEventObject>;

export type SFCSettedEventFilter = TypedEventFilter<SFCSettedEvent>;

export interface TokenSettedEventObject {
  newToken: string;
}
export type TokenSettedEvent = TypedEvent<[string], TokenSettedEventObject>;

export type TokenSettedEventFilter = TypedEventFilter<TokenSettedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface UserDeletedEventObject {
  structureOwner: string;
  deletedUser: string;
  lvl: BigNumber;
  index: BigNumber;
}
export type UserDeletedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  UserDeletedEventObject
>;

export type UserDeletedEventFilter = TypedEventFilter<UserDeletedEvent>;

export interface UserDrawnEventObject {
  newStructOwner: string;
  newChild: string;
  lvl: BigNumber;
  index: BigNumber;
  raw: boolean;
}
export type UserDrawnEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, boolean],
  UserDrawnEventObject
>;

export type UserDrawnEventFilter = TypedEventFilter<UserDrawnEvent>;

export interface UsserChangedEventObject {
  from: string;
  to: string;
}
export type UsserChangedEvent = TypedEvent<
  [string, string],
  UsserChangedEventObject
>;

export type UsserChangedEventFilter = TypedEventFilter<UsserChangedEvent>;

export interface simpleBuyEventObject {
  buyer: string;
  receiver: string;
  lvl: BigNumber;
}
export type simpleBuyEvent = TypedEvent<
  [string, string, BigNumber],
  simpleBuyEventObject
>;

export type simpleBuyEventFilter = TypedEventFilter<simpleBuyEvent>;

export interface tokenAreWithdrawnByOwnerEventObject {
  to: string;
  amount: BigNumber;
  tokenIndex: BigNumber;
}
export type tokenAreWithdrawnByOwnerEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  tokenAreWithdrawnByOwnerEventObject
>;

export type tokenAreWithdrawnByOwnerEventFilter =
  TypedEventFilter<tokenAreWithdrawnByOwnerEvent>;

export interface updateOtherPersonStructureEventObject {
  buyer: string;
  receiver: string;
  lvl: BigNumber;
}
export type updateOtherPersonStructureEvent = TypedEvent<
  [string, string, BigNumber],
  updateOtherPersonStructureEventObject
>;

export type updateOtherPersonStructureEventFilter =
  TypedEventFilter<updateOtherPersonStructureEvent>;

export interface Classic extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ClassicInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CORE_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    SFC(overrides?: CallOverrides): Promise<[string]>;

    SFCR(overrides?: CallOverrides): Promise<[string]>;

    accountLevels(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean[], BigNumber[]]>;

    activate(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    addFrozenMoneyS3(
      _lvl: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addFrozenMoneyS6(
      _lvl: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buy(
      lvl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeAddress(
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeAutoReCycle(
      _lvl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeAutoUpgrade(
      _lvl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeSFCR(
      newSFCR: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    childs(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    childsS3(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    childsS6Lvl1(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    childsS6Lvl2(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    currentDecimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentStartPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    delegateCall(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getActivateParent(
      _child: PromiseOrValue<string>,
      _lvl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { __parent: string }>;

    getCoreAddress(overrides?: CallOverrides): Promise<[string]>;

    getLevel(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSettings(
      _addr: PromiseOrValue<string>,
      _lvl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean]>;

    getUsersChildsRow1(
      targetUser: PromiseOrValue<string>,
      lvl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getUsersChildsRow2(
      targetUser: PromiseOrValue<string>,
      lvl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getUsersChildsS3(
      targetUser: PromiseOrValue<string>,
      lvl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    initialize(
      _token: PromiseOrValue<string>,
      innerFund: PromiseOrValue<string>,
      productFund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    marketingParents(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    matrixS3(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        slot: BigNumber;
        lastChild: BigNumber;
        frozenMoneyS3: BigNumber;
      }
    >;

    matrixS6(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        slot: BigNumber;
        lastChild1: BigNumber;
        lastChild2: BigNumber;
        frozenMoneyS6: BigNumber;
      }
    >;

    navigator(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, boolean] & {
        lvl: BigNumber;
        slot: BigNumber;
        ownerOfStruct: string;
        row: boolean;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    parent(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    permissionToChangePresence(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    prices(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    products(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    registration(
      _parent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registrationTime(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    s_currentTokenIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    s_innerFund(overrides?: CallOverrides): Promise<[string]>;

    s_productFund(overrides?: CallOverrides): Promise<[string]>;

    setCoreAddress(
      _coreAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInnerFund(
      innerFund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNewPrice(
      newStartPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProductFund(
      productFund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSFC(
      _SFC: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setToken(
      _token: PromiseOrValue<string>,
      newDecimals: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawForce(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      tokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawS3(
      lvl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawS6(
      lvl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  CORE_ADDRESS(overrides?: CallOverrides): Promise<string>;

  SFC(overrides?: CallOverrides): Promise<string>;

  SFCR(overrides?: CallOverrides): Promise<string>;

  accountLevels(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[boolean[], BigNumber[]]>;

  activate(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  addFrozenMoneyS3(
    _lvl: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addFrozenMoneyS6(
    _lvl: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buy(
    lvl: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeAddress(
    _addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeAutoReCycle(
    _lvl: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeAutoUpgrade(
    _lvl: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeSFCR(
    newSFCR: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  childs(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  childsS3(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  childsS6Lvl1(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  childsS6Lvl2(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  currentDecimals(overrides?: CallOverrides): Promise<BigNumber>;

  currentStartPrice(overrides?: CallOverrides): Promise<BigNumber>;

  delegateCall(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getActivateParent(
    _child: PromiseOrValue<string>,
    _lvl: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getCoreAddress(overrides?: CallOverrides): Promise<string>;

  getLevel(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSettings(
    _addr: PromiseOrValue<string>,
    _lvl: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[boolean, boolean]>;

  getUsersChildsRow1(
    targetUser: PromiseOrValue<string>,
    lvl: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getUsersChildsRow2(
    targetUser: PromiseOrValue<string>,
    lvl: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getUsersChildsS3(
    targetUser: PromiseOrValue<string>,
    lvl: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  initialize(
    _token: PromiseOrValue<string>,
    innerFund: PromiseOrValue<string>,
    productFund: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  marketingParents(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  matrixS3(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      slot: BigNumber;
      lastChild: BigNumber;
      frozenMoneyS3: BigNumber;
    }
  >;

  matrixS6(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      slot: BigNumber;
      lastChild1: BigNumber;
      lastChild2: BigNumber;
      frozenMoneyS6: BigNumber;
    }
  >;

  navigator(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, boolean] & {
      lvl: BigNumber;
      slot: BigNumber;
      ownerOfStruct: string;
      row: boolean;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  parent(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  permissionToChangePresence(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  prices(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  products(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  registration(
    _parent: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registrationTime(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  s_currentTokenIndex(overrides?: CallOverrides): Promise<BigNumber>;

  s_innerFund(overrides?: CallOverrides): Promise<string>;

  s_productFund(overrides?: CallOverrides): Promise<string>;

  setCoreAddress(
    _coreAddr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInnerFund(
    innerFund: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNewPrice(
    newStartPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProductFund(
    productFund: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSFC(
    _SFC: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setToken(
    _token: PromiseOrValue<string>,
    newDecimals: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokens(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawForce(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    tokenIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawS3(
    lvl: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawS6(
    lvl: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CORE_ADDRESS(overrides?: CallOverrides): Promise<string>;

    SFC(overrides?: CallOverrides): Promise<string>;

    SFCR(overrides?: CallOverrides): Promise<string>;

    accountLevels(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean[], BigNumber[]]>;

    activate(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addFrozenMoneyS3(
      _lvl: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addFrozenMoneyS6(
      _lvl: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    buy(
      lvl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeAddress(
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeAutoReCycle(
      _lvl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeAutoUpgrade(
      _lvl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeSFCR(
      newSFCR: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    childs(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    childsS3(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    childsS6Lvl1(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    childsS6Lvl2(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    currentDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    currentStartPrice(overrides?: CallOverrides): Promise<BigNumber>;

    delegateCall(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getActivateParent(
      _child: PromiseOrValue<string>,
      _lvl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getCoreAddress(overrides?: CallOverrides): Promise<string>;

    getLevel(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSettings(
      _addr: PromiseOrValue<string>,
      _lvl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean]>;

    getUsersChildsRow1(
      targetUser: PromiseOrValue<string>,
      lvl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getUsersChildsRow2(
      targetUser: PromiseOrValue<string>,
      lvl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getUsersChildsS3(
      targetUser: PromiseOrValue<string>,
      lvl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    initialize(
      _token: PromiseOrValue<string>,
      innerFund: PromiseOrValue<string>,
      productFund: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    marketingParents(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    matrixS3(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        slot: BigNumber;
        lastChild: BigNumber;
        frozenMoneyS3: BigNumber;
      }
    >;

    matrixS6(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        slot: BigNumber;
        lastChild1: BigNumber;
        lastChild2: BigNumber;
        frozenMoneyS6: BigNumber;
      }
    >;

    navigator(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, boolean] & {
        lvl: BigNumber;
        slot: BigNumber;
        ownerOfStruct: string;
        row: boolean;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    parent(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    permissionToChangePresence(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    prices(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    products(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    registration(
      _parent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registrationTime(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    s_currentTokenIndex(overrides?: CallOverrides): Promise<BigNumber>;

    s_innerFund(overrides?: CallOverrides): Promise<string>;

    s_productFund(overrides?: CallOverrides): Promise<string>;

    setCoreAddress(
      _coreAddr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setInnerFund(
      innerFund: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setNewPrice(
      newStartPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProductFund(
      productFund: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSFC(
      _SFC: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setToken(
      _token: PromiseOrValue<string>,
      newDecimals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    withdrawForce(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      tokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawS3(
      lvl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawS6(
      lvl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "AllFundsWithdrawn(address,uint256,uint256)"(
      to?: PromiseOrValue<string> | null,
      amount?: null,
      tokenIndex?: PromiseOrValue<BigNumberish> | null
    ): AllFundsWithdrawnEventFilter;
    AllFundsWithdrawn(
      to?: PromiseOrValue<string> | null,
      amount?: null,
      tokenIndex?: PromiseOrValue<BigNumberish> | null
    ): AllFundsWithdrawnEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "FundsWithdrawn(address,uint256,uint256)"(
      to?: PromiseOrValue<string> | null,
      level?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): FundsWithdrawnEventFilter;
    FundsWithdrawn(
      to?: PromiseOrValue<string> | null,
      level?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): FundsWithdrawnEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "InnerFundSetted(address)"(innerFund?: null): InnerFundSettedEventFilter;
    InnerFundSetted(innerFund?: null): InnerFundSettedEventFilter;

    "LastChildChanged(address,uint64,uint256,bool,bool)"(
      targetUser?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      lvl?: null,
      raw?: null,
      isPositive?: null
    ): LastChildChangedEventFilter;
    LastChildChanged(
      targetUser?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      lvl?: null,
      raw?: null,
      isPositive?: null
    ): LastChildChangedEventFilter;

    "MarketingParentChanged(address,address,uint256)"(
      targetUser?: PromiseOrValue<string> | null,
      newParent?: PromiseOrValue<string> | null,
      lvl?: PromiseOrValue<BigNumberish> | null
    ): MarketingParentChangedEventFilter;
    MarketingParentChanged(
      targetUser?: PromiseOrValue<string> | null,
      newParent?: PromiseOrValue<string> | null,
      lvl?: PromiseOrValue<BigNumberish> | null
    ): MarketingParentChangedEventFilter;

    "NavigatorChanged(address,address,uint128,uint128,bool)"(
      structureOwner?: PromiseOrValue<string> | null,
      deletedUser?: PromiseOrValue<string> | null,
      lvl?: PromiseOrValue<BigNumberish> | null,
      slot?: null,
      raw?: null
    ): NavigatorChangedEventFilter;
    NavigatorChanged(
      structureOwner?: PromiseOrValue<string> | null,
      deletedUser?: PromiseOrValue<string> | null,
      lvl?: PromiseOrValue<BigNumberish> | null,
      slot?: null,
      raw?: null
    ): NavigatorChangedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "ProductFundSetted(address)"(
      productFund?: null
    ): ProductFundSettedEventFilter;
    ProductFundSetted(productFund?: null): ProductFundSettedEventFilter;

    "SFCRChanged(address)"(newSFCR?: null): SFCRChangedEventFilter;
    SFCRChanged(newSFCR?: null): SFCRChangedEventFilter;

    "SFCSetted(address)"(newToken?: null): SFCSettedEventFilter;
    SFCSetted(newToken?: null): SFCSettedEventFilter;

    "TokenSetted(address)"(newToken?: null): TokenSettedEventFilter;
    TokenSetted(newToken?: null): TokenSettedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;

    "UserDeleted(address,address,uint256,uint256)"(
      structureOwner?: PromiseOrValue<string> | null,
      deletedUser?: PromiseOrValue<string> | null,
      lvl?: PromiseOrValue<BigNumberish> | null,
      index?: null
    ): UserDeletedEventFilter;
    UserDeleted(
      structureOwner?: PromiseOrValue<string> | null,
      deletedUser?: PromiseOrValue<string> | null,
      lvl?: PromiseOrValue<BigNumberish> | null,
      index?: null
    ): UserDeletedEventFilter;

    "UserDrawn(address,address,uint256,uint256,bool)"(
      newStructOwner?: PromiseOrValue<string> | null,
      newChild?: PromiseOrValue<string> | null,
      lvl?: PromiseOrValue<BigNumberish> | null,
      index?: null,
      raw?: null
    ): UserDrawnEventFilter;
    UserDrawn(
      newStructOwner?: PromiseOrValue<string> | null,
      newChild?: PromiseOrValue<string> | null,
      lvl?: PromiseOrValue<BigNumberish> | null,
      index?: null,
      raw?: null
    ): UserDrawnEventFilter;

    "UsserChanged(address,address)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): UsserChangedEventFilter;
    UsserChanged(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): UsserChangedEventFilter;

    "simpleBuy(address,address,uint256)"(
      buyer?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      lvl?: PromiseOrValue<BigNumberish> | null
    ): simpleBuyEventFilter;
    simpleBuy(
      buyer?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      lvl?: PromiseOrValue<BigNumberish> | null
    ): simpleBuyEventFilter;

    "tokenAreWithdrawnByOwner(address,uint256,uint256)"(
      to?: null,
      amount?: null,
      tokenIndex?: null
    ): tokenAreWithdrawnByOwnerEventFilter;
    tokenAreWithdrawnByOwner(
      to?: null,
      amount?: null,
      tokenIndex?: null
    ): tokenAreWithdrawnByOwnerEventFilter;

    "updateOtherPersonStructure(address,address,uint256)"(
      buyer?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      lvl?: PromiseOrValue<BigNumberish> | null
    ): updateOtherPersonStructureEventFilter;
    updateOtherPersonStructure(
      buyer?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      lvl?: PromiseOrValue<BigNumberish> | null
    ): updateOtherPersonStructureEventFilter;
  };

  estimateGas: {
    CORE_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    SFC(overrides?: CallOverrides): Promise<BigNumber>;

    SFCR(overrides?: CallOverrides): Promise<BigNumber>;

    accountLevels(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    activate(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addFrozenMoneyS3(
      _lvl: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addFrozenMoneyS6(
      _lvl: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buy(
      lvl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeAddress(
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeAutoReCycle(
      _lvl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeAutoUpgrade(
      _lvl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeSFCR(
      newSFCR: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    childs(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    childsS3(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    childsS6Lvl1(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    childsS6Lvl2(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    currentStartPrice(overrides?: CallOverrides): Promise<BigNumber>;

    delegateCall(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getActivateParent(
      _child: PromiseOrValue<string>,
      _lvl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCoreAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getLevel(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSettings(
      _addr: PromiseOrValue<string>,
      _lvl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUsersChildsRow1(
      targetUser: PromiseOrValue<string>,
      lvl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUsersChildsRow2(
      targetUser: PromiseOrValue<string>,
      lvl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUsersChildsS3(
      targetUser: PromiseOrValue<string>,
      lvl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _token: PromiseOrValue<string>,
      innerFund: PromiseOrValue<string>,
      productFund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    marketingParents(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    matrixS3(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    matrixS6(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    navigator(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    parent(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permissionToChangePresence(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prices(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    products(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    registration(
      _parent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registrationTime(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    s_currentTokenIndex(overrides?: CallOverrides): Promise<BigNumber>;

    s_innerFund(overrides?: CallOverrides): Promise<BigNumber>;

    s_productFund(overrides?: CallOverrides): Promise<BigNumber>;

    setCoreAddress(
      _coreAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInnerFund(
      innerFund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNewPrice(
      newStartPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProductFund(
      productFund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSFC(
      _SFC: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setToken(
      _token: PromiseOrValue<string>,
      newDecimals: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawForce(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      tokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawS3(
      lvl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawS6(
      lvl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CORE_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SFC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SFCR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accountLevels(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activate(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addFrozenMoneyS3(
      _lvl: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addFrozenMoneyS6(
      _lvl: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buy(
      lvl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeAddress(
      _addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeAutoReCycle(
      _lvl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeAutoUpgrade(
      _lvl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeSFCR(
      newSFCR: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    childs(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    childsS3(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    childsS6Lvl1(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    childsS6Lvl2(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentStartPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegateCall(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getActivateParent(
      _child: PromiseOrValue<string>,
      _lvl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCoreAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLevel(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSettings(
      _addr: PromiseOrValue<string>,
      _lvl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUsersChildsRow1(
      targetUser: PromiseOrValue<string>,
      lvl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUsersChildsRow2(
      targetUser: PromiseOrValue<string>,
      lvl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUsersChildsS3(
      targetUser: PromiseOrValue<string>,
      lvl: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _token: PromiseOrValue<string>,
      innerFund: PromiseOrValue<string>,
      productFund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    marketingParents(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    matrixS3(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    matrixS6(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    navigator(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parent(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permissionToChangePresence(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prices(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    products(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registration(
      _parent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registrationTime(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    s_currentTokenIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    s_innerFund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    s_productFund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCoreAddress(
      _coreAddr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInnerFund(
      innerFund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNewPrice(
      newStartPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProductFund(
      productFund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSFC(
      _SFC: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setToken(
      _token: PromiseOrValue<string>,
      newDecimals: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawForce(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      tokenIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawS3(
      lvl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawS6(
      lvl: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
