/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface RegistryInterface extends utils.Interface {
  functions: {
    "acceptGovernance()": FunctionFragment;
    "getAirdropPool()": FunctionFragment;
    "getChipAddr(uint256)": FunctionFragment;
    "getChipEnergy()": FunctionFragment;
    "getChipId(address)": FunctionFragment;
    "getCoreContract()": FunctionFragment;
    "getEnergyCoin()": FunctionFragment;
    "getExchangeContract()": FunctionFragment;
    "getHMFS(uint256)": FunctionFragment;
    "getHoldingContract()": FunctionFragment;
    "getLiquidityListingFund()": FunctionFragment;
    "getLiquidityPool()": FunctionFragment;
    "getMFS()": FunctionFragment;
    "getMetaCore()": FunctionFragment;
    "getMetaDevelopmentAndIncentiveFund()": FunctionFragment;
    "getMetaForceContract()": FunctionFragment;
    "getMetaPool()": FunctionFragment;
    "getOtherPool()": FunctionFragment;
    "getQuantumWaveContract()": FunctionFragment;
    "getRequestMFSContract()": FunctionFragment;
    "getRewardsFund()": FunctionFragment;
    "getRoyaltyNFTGiftsPool()": FunctionFragment;
    "getSFCR()": FunctionFragment;
    "getSFCR2()": FunctionFragment;
    "getStableCoin()": FunctionFragment;
    "getTeamFund()": FunctionFragment;
    "governor()": FunctionFragment;
    "initialize()": FunctionFragment;
    "pendingGovernor()": FunctionFragment;
    "setAirdropPool(address)": FunctionFragment;
    "setChip(uint256,address)": FunctionFragment;
    "setChipEnergy(address)": FunctionFragment;
    "setCoreContract(address)": FunctionFragment;
    "setEnergyCoin(address)": FunctionFragment;
    "setExchangeContract(address)": FunctionFragment;
    "setHMFS(uint256,address)": FunctionFragment;
    "setHoldingContract(address)": FunctionFragment;
    "setLiquidityListingFund(address)": FunctionFragment;
    "setLiquidityPool(address)": FunctionFragment;
    "setMFS(address)": FunctionFragment;
    "setMetaCore(address)": FunctionFragment;
    "setMetaDevelopmentAndIncentiveFund(address)": FunctionFragment;
    "setMetaForceContract(address)": FunctionFragment;
    "setMetaPool(address)": FunctionFragment;
    "setOtherPool(address)": FunctionFragment;
    "setQuantumWaveContract(address)": FunctionFragment;
    "setRequestMFSContract(address)": FunctionFragment;
    "setRewardsFund(address)": FunctionFragment;
    "setRoyaltyNFTGiftsPool(address)": FunctionFragment;
    "setSFCR(address)": FunctionFragment;
    "setSFCR2(address)": FunctionFragment;
    "setStableCoin(address)": FunctionFragment;
    "setTeamFund(address)": FunctionFragment;
    "transitGovernance(address,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptGovernance"
      | "getAirdropPool"
      | "getChipAddr"
      | "getChipEnergy"
      | "getChipId"
      | "getCoreContract"
      | "getEnergyCoin"
      | "getExchangeContract"
      | "getHMFS"
      | "getHoldingContract"
      | "getLiquidityListingFund"
      | "getLiquidityPool"
      | "getMFS"
      | "getMetaCore"
      | "getMetaDevelopmentAndIncentiveFund"
      | "getMetaForceContract"
      | "getMetaPool"
      | "getOtherPool"
      | "getQuantumWaveContract"
      | "getRequestMFSContract"
      | "getRewardsFund"
      | "getRoyaltyNFTGiftsPool"
      | "getSFCR"
      | "getSFCR2"
      | "getStableCoin"
      | "getTeamFund"
      | "governor"
      | "initialize"
      | "pendingGovernor"
      | "setAirdropPool"
      | "setChip"
      | "setChipEnergy"
      | "setCoreContract"
      | "setEnergyCoin"
      | "setExchangeContract"
      | "setHMFS"
      | "setHoldingContract"
      | "setLiquidityListingFund"
      | "setLiquidityPool"
      | "setMFS"
      | "setMetaCore"
      | "setMetaDevelopmentAndIncentiveFund"
      | "setMetaForceContract"
      | "setMetaPool"
      | "setOtherPool"
      | "setQuantumWaveContract"
      | "setRequestMFSContract"
      | "setRewardsFund"
      | "setRoyaltyNFTGiftsPool"
      | "setSFCR"
      | "setSFCR2"
      | "setStableCoin"
      | "setTeamFund"
      | "transitGovernance"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAirdropPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChipAddr",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getChipEnergy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChipId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCoreContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEnergyCoin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExchangeContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHMFS",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getHoldingContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityListingFund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getMFS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMetaCore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMetaDevelopmentAndIncentiveFund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMetaForceContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMetaPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOtherPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getQuantumWaveContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestMFSContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsFund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoyaltyNFTGiftsPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getSFCR", values?: undefined): string;
  encodeFunctionData(functionFragment: "getSFCR2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getStableCoin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTeamFund",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAirdropPool",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setChip",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setChipEnergy",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCoreContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnergyCoin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setExchangeContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setHMFS",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setHoldingContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityListingFund",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityPool",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMFS",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetaCore",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetaDevelopmentAndIncentiveFund",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetaForceContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetaPool",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOtherPool",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setQuantumWaveContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRequestMFSContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsFund",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyaltyNFTGiftsPool",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSFCR",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSFCR2",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStableCoin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTeamFund",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transitGovernance",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAirdropPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChipAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChipEnergy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChipId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCoreContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEnergyCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchangeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHMFS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getHoldingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityListingFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMFS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMetaCore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetaDevelopmentAndIncentiveFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetaForceContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetaPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOtherPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuantumWaveContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestMFSContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoyaltyNFTGiftsPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSFCR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSFCR2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStableCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTeamFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAirdropPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setChip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setChipEnergy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCoreContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEnergyCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExchangeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setHMFS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setHoldingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityListingFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMFS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMetaCore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetaDevelopmentAndIncentiveFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetaForceContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetaPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOtherPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setQuantumWaveContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRequestMFSContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoyaltyNFTGiftsPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSFCR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setSFCR2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStableCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTeamFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transitGovernance",
    data: BytesLike
  ): Result;

  events: {
    "GovernanceTransited(address,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "PendingGovernanceTransition(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GovernanceTransited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PendingGovernanceTransition"
  ): EventFragment;
}

export interface GovernanceTransitedEventObject {
  governor: string;
  newGovernor: string;
}
export type GovernanceTransitedEvent = TypedEvent<
  [string, string],
  GovernanceTransitedEventObject
>;

export type GovernanceTransitedEventFilter =
  TypedEventFilter<GovernanceTransitedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface PendingGovernanceTransitionEventObject {
  governor: string;
  newGovernor: string;
}
export type PendingGovernanceTransitionEvent = TypedEvent<
  [string, string],
  PendingGovernanceTransitionEventObject
>;

export type PendingGovernanceTransitionEventFilter =
  TypedEventFilter<PendingGovernanceTransitionEvent>;

export interface Registry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptGovernance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAirdropPool(overrides?: CallOverrides): Promise<[string]>;

    getChipAddr(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getChipEnergy(overrides?: CallOverrides): Promise<[string]>;

    getChipId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCoreContract(overrides?: CallOverrides): Promise<[string]>;

    getEnergyCoin(overrides?: CallOverrides): Promise<[string]>;

    getExchangeContract(overrides?: CallOverrides): Promise<[string]>;

    getHMFS(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getHoldingContract(overrides?: CallOverrides): Promise<[string]>;

    getLiquidityListingFund(overrides?: CallOverrides): Promise<[string]>;

    getLiquidityPool(overrides?: CallOverrides): Promise<[string]>;

    getMFS(overrides?: CallOverrides): Promise<[string]>;

    getMetaCore(overrides?: CallOverrides): Promise<[string]>;

    getMetaDevelopmentAndIncentiveFund(
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMetaForceContract(overrides?: CallOverrides): Promise<[string]>;

    getMetaPool(overrides?: CallOverrides): Promise<[string]>;

    getOtherPool(overrides?: CallOverrides): Promise<[string]>;

    getQuantumWaveContract(overrides?: CallOverrides): Promise<[string]>;

    getRequestMFSContract(overrides?: CallOverrides): Promise<[string]>;

    getRewardsFund(overrides?: CallOverrides): Promise<[string]>;

    getRoyaltyNFTGiftsPool(overrides?: CallOverrides): Promise<[string]>;

    getSFCR(overrides?: CallOverrides): Promise<[string]>;

    getSFCR2(overrides?: CallOverrides): Promise<[string]>;

    getStableCoin(overrides?: CallOverrides): Promise<[string]>;

    getTeamFund(overrides?: CallOverrides): Promise<[string]>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pendingGovernor(overrides?: CallOverrides): Promise<[string]>;

    setAirdropPool(
      _airdropPool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setChip(
      id: PromiseOrValue<BigNumberish>,
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setChipEnergy(
      _chipEnergy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCoreContract(
      _coreContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEnergyCoin(
      _energyCoin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setExchangeContract(
      _exchangeContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setHMFS(
      level: PromiseOrValue<BigNumberish>,
      _hMFS: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setHoldingContract(
      _holdingContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLiquidityListingFund(
      _liquidityListingFund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLiquidityPool(
      _liquidityPool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMFS(
      _mfs: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMetaCore(
      _metaCore: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMetaDevelopmentAndIncentiveFund(
      _metaDevelopmentAndIncentiveFund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMetaForceContract(
      _metaForceContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMetaPool(
      _metaPool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOtherPool(
      _otherPool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setQuantumWaveContract(
      _quantumWaveContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRequestMFSContract(
      _requestMFSContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRewardsFund(
      _rewardsFund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRoyaltyNFTGiftsPool(
      _royaltyNFTGiftsPooltaPool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSFCR(
      _sFCR: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSFCR2(
      _sFCR2: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStableCoin(
      _stableCoin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTeamFund(
      _teamFund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transitGovernance(
      newGovernor: PromiseOrValue<string>,
      force: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptGovernance(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAirdropPool(overrides?: CallOverrides): Promise<string>;

  getChipAddr(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getChipEnergy(overrides?: CallOverrides): Promise<string>;

  getChipId(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCoreContract(overrides?: CallOverrides): Promise<string>;

  getEnergyCoin(overrides?: CallOverrides): Promise<string>;

  getExchangeContract(overrides?: CallOverrides): Promise<string>;

  getHMFS(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getHoldingContract(overrides?: CallOverrides): Promise<string>;

  getLiquidityListingFund(overrides?: CallOverrides): Promise<string>;

  getLiquidityPool(overrides?: CallOverrides): Promise<string>;

  getMFS(overrides?: CallOverrides): Promise<string>;

  getMetaCore(overrides?: CallOverrides): Promise<string>;

  getMetaDevelopmentAndIncentiveFund(
    overrides?: CallOverrides
  ): Promise<string>;

  getMetaForceContract(overrides?: CallOverrides): Promise<string>;

  getMetaPool(overrides?: CallOverrides): Promise<string>;

  getOtherPool(overrides?: CallOverrides): Promise<string>;

  getQuantumWaveContract(overrides?: CallOverrides): Promise<string>;

  getRequestMFSContract(overrides?: CallOverrides): Promise<string>;

  getRewardsFund(overrides?: CallOverrides): Promise<string>;

  getRoyaltyNFTGiftsPool(overrides?: CallOverrides): Promise<string>;

  getSFCR(overrides?: CallOverrides): Promise<string>;

  getSFCR2(overrides?: CallOverrides): Promise<string>;

  getStableCoin(overrides?: CallOverrides): Promise<string>;

  getTeamFund(overrides?: CallOverrides): Promise<string>;

  governor(overrides?: CallOverrides): Promise<string>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pendingGovernor(overrides?: CallOverrides): Promise<string>;

  setAirdropPool(
    _airdropPool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setChip(
    id: PromiseOrValue<BigNumberish>,
    addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setChipEnergy(
    _chipEnergy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCoreContract(
    _coreContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEnergyCoin(
    _energyCoin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setExchangeContract(
    _exchangeContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setHMFS(
    level: PromiseOrValue<BigNumberish>,
    _hMFS: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setHoldingContract(
    _holdingContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLiquidityListingFund(
    _liquidityListingFund: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLiquidityPool(
    _liquidityPool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMFS(
    _mfs: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMetaCore(
    _metaCore: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMetaDevelopmentAndIncentiveFund(
    _metaDevelopmentAndIncentiveFund: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMetaForceContract(
    _metaForceContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMetaPool(
    _metaPool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOtherPool(
    _otherPool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setQuantumWaveContract(
    _quantumWaveContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRequestMFSContract(
    _requestMFSContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRewardsFund(
    _rewardsFund: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRoyaltyNFTGiftsPool(
    _royaltyNFTGiftsPooltaPool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSFCR(
    _sFCR: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSFCR2(
    _sFCR2: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStableCoin(
    _stableCoin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTeamFund(
    _teamFund: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transitGovernance(
    newGovernor: PromiseOrValue<string>,
    force: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptGovernance(overrides?: CallOverrides): Promise<void>;

    getAirdropPool(overrides?: CallOverrides): Promise<string>;

    getChipAddr(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getChipEnergy(overrides?: CallOverrides): Promise<string>;

    getChipId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCoreContract(overrides?: CallOverrides): Promise<string>;

    getEnergyCoin(overrides?: CallOverrides): Promise<string>;

    getExchangeContract(overrides?: CallOverrides): Promise<string>;

    getHMFS(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getHoldingContract(overrides?: CallOverrides): Promise<string>;

    getLiquidityListingFund(overrides?: CallOverrides): Promise<string>;

    getLiquidityPool(overrides?: CallOverrides): Promise<string>;

    getMFS(overrides?: CallOverrides): Promise<string>;

    getMetaCore(overrides?: CallOverrides): Promise<string>;

    getMetaDevelopmentAndIncentiveFund(
      overrides?: CallOverrides
    ): Promise<string>;

    getMetaForceContract(overrides?: CallOverrides): Promise<string>;

    getMetaPool(overrides?: CallOverrides): Promise<string>;

    getOtherPool(overrides?: CallOverrides): Promise<string>;

    getQuantumWaveContract(overrides?: CallOverrides): Promise<string>;

    getRequestMFSContract(overrides?: CallOverrides): Promise<string>;

    getRewardsFund(overrides?: CallOverrides): Promise<string>;

    getRoyaltyNFTGiftsPool(overrides?: CallOverrides): Promise<string>;

    getSFCR(overrides?: CallOverrides): Promise<string>;

    getSFCR2(overrides?: CallOverrides): Promise<string>;

    getStableCoin(overrides?: CallOverrides): Promise<string>;

    getTeamFund(overrides?: CallOverrides): Promise<string>;

    governor(overrides?: CallOverrides): Promise<string>;

    initialize(overrides?: CallOverrides): Promise<void>;

    pendingGovernor(overrides?: CallOverrides): Promise<string>;

    setAirdropPool(
      _airdropPool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setChip(
      id: PromiseOrValue<BigNumberish>,
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setChipEnergy(
      _chipEnergy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCoreContract(
      _coreContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setEnergyCoin(
      _energyCoin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setExchangeContract(
      _exchangeContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setHMFS(
      level: PromiseOrValue<BigNumberish>,
      _hMFS: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setHoldingContract(
      _holdingContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidityListingFund(
      _liquidityListingFund: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidityPool(
      _liquidityPool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMFS(
      _mfs: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMetaCore(
      _metaCore: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMetaDevelopmentAndIncentiveFund(
      _metaDevelopmentAndIncentiveFund: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMetaForceContract(
      _metaForceContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMetaPool(
      _metaPool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOtherPool(
      _otherPool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setQuantumWaveContract(
      _quantumWaveContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRequestMFSContract(
      _requestMFSContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardsFund(
      _rewardsFund: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoyaltyNFTGiftsPool(
      _royaltyNFTGiftsPooltaPool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSFCR(
      _sFCR: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSFCR2(
      _sFCR2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStableCoin(
      _stableCoin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTeamFund(
      _teamFund: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transitGovernance(
      newGovernor: PromiseOrValue<string>,
      force: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "GovernanceTransited(address,address)"(
      governor?: PromiseOrValue<string> | null,
      newGovernor?: PromiseOrValue<string> | null
    ): GovernanceTransitedEventFilter;
    GovernanceTransited(
      governor?: PromiseOrValue<string> | null,
      newGovernor?: PromiseOrValue<string> | null
    ): GovernanceTransitedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "PendingGovernanceTransition(address,address)"(
      governor?: PromiseOrValue<string> | null,
      newGovernor?: PromiseOrValue<string> | null
    ): PendingGovernanceTransitionEventFilter;
    PendingGovernanceTransition(
      governor?: PromiseOrValue<string> | null,
      newGovernor?: PromiseOrValue<string> | null
    ): PendingGovernanceTransitionEventFilter;
  };

  estimateGas: {
    acceptGovernance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAirdropPool(overrides?: CallOverrides): Promise<BigNumber>;

    getChipAddr(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChipEnergy(overrides?: CallOverrides): Promise<BigNumber>;

    getChipId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCoreContract(overrides?: CallOverrides): Promise<BigNumber>;

    getEnergyCoin(overrides?: CallOverrides): Promise<BigNumber>;

    getExchangeContract(overrides?: CallOverrides): Promise<BigNumber>;

    getHMFS(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHoldingContract(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidityListingFund(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidityPool(overrides?: CallOverrides): Promise<BigNumber>;

    getMFS(overrides?: CallOverrides): Promise<BigNumber>;

    getMetaCore(overrides?: CallOverrides): Promise<BigNumber>;

    getMetaDevelopmentAndIncentiveFund(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMetaForceContract(overrides?: CallOverrides): Promise<BigNumber>;

    getMetaPool(overrides?: CallOverrides): Promise<BigNumber>;

    getOtherPool(overrides?: CallOverrides): Promise<BigNumber>;

    getQuantumWaveContract(overrides?: CallOverrides): Promise<BigNumber>;

    getRequestMFSContract(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardsFund(overrides?: CallOverrides): Promise<BigNumber>;

    getRoyaltyNFTGiftsPool(overrides?: CallOverrides): Promise<BigNumber>;

    getSFCR(overrides?: CallOverrides): Promise<BigNumber>;

    getSFCR2(overrides?: CallOverrides): Promise<BigNumber>;

    getStableCoin(overrides?: CallOverrides): Promise<BigNumber>;

    getTeamFund(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pendingGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    setAirdropPool(
      _airdropPool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setChip(
      id: PromiseOrValue<BigNumberish>,
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setChipEnergy(
      _chipEnergy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCoreContract(
      _coreContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEnergyCoin(
      _energyCoin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setExchangeContract(
      _exchangeContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setHMFS(
      level: PromiseOrValue<BigNumberish>,
      _hMFS: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setHoldingContract(
      _holdingContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLiquidityListingFund(
      _liquidityListingFund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLiquidityPool(
      _liquidityPool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMFS(
      _mfs: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMetaCore(
      _metaCore: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMetaDevelopmentAndIncentiveFund(
      _metaDevelopmentAndIncentiveFund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMetaForceContract(
      _metaForceContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMetaPool(
      _metaPool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOtherPool(
      _otherPool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setQuantumWaveContract(
      _quantumWaveContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRequestMFSContract(
      _requestMFSContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRewardsFund(
      _rewardsFund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRoyaltyNFTGiftsPool(
      _royaltyNFTGiftsPooltaPool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSFCR(
      _sFCR: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSFCR2(
      _sFCR2: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStableCoin(
      _stableCoin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTeamFund(
      _teamFund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transitGovernance(
      newGovernor: PromiseOrValue<string>,
      force: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptGovernance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAirdropPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getChipAddr(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChipEnergy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getChipId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCoreContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEnergyCoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getExchangeContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHMFS(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHoldingContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidityListingFund(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidityPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMFS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMetaCore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMetaDevelopmentAndIncentiveFund(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMetaForceContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMetaPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOtherPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getQuantumWaveContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequestMFSContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardsFund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoyaltyNFTGiftsPool(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSFCR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSFCR2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStableCoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTeamFund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pendingGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAirdropPool(
      _airdropPool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setChip(
      id: PromiseOrValue<BigNumberish>,
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setChipEnergy(
      _chipEnergy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCoreContract(
      _coreContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEnergyCoin(
      _energyCoin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setExchangeContract(
      _exchangeContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setHMFS(
      level: PromiseOrValue<BigNumberish>,
      _hMFS: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setHoldingContract(
      _holdingContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidityListingFund(
      _liquidityListingFund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidityPool(
      _liquidityPool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMFS(
      _mfs: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMetaCore(
      _metaCore: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMetaDevelopmentAndIncentiveFund(
      _metaDevelopmentAndIncentiveFund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMetaForceContract(
      _metaForceContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMetaPool(
      _metaPool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOtherPool(
      _otherPool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setQuantumWaveContract(
      _quantumWaveContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRequestMFSContract(
      _requestMFSContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRewardsFund(
      _rewardsFund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRoyaltyNFTGiftsPool(
      _royaltyNFTGiftsPooltaPool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSFCR(
      _sFCR: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSFCR2(
      _sFCR2: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStableCoin(
      _stableCoin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTeamFund(
      _teamFund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transitGovernance(
      newGovernor: PromiseOrValue<string>,
      force: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
