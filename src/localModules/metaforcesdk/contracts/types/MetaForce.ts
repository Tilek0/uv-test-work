/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface MetaForceInterface extends utils.Interface {
  functions: {
    "acceptGovernance()": FunctionFragment;
    "activationPack(uint256,uint256,bool)": FunctionFragment;
    "amountChipEnergyForLevel(uint256)": FunctionFragment;
    "amountForSwapSFCR(uint256)": FunctionFragment;
    "calcNeedMFSForRenew(uint256,uint256,uint256)": FunctionFragment;
    "countRenewal(uint256,uint256)": FunctionFragment;
    "datesForBuying(uint256,uint256)": FunctionFragment;
    "firstActivationPack(uint256,uint256,bool)": FunctionFragment;
    "firstActivationPackWithReplace(uint256,uint256,bool)": FunctionFragment;
    "governor()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "lastIndexBuying(uint256)": FunctionFragment;
    "penaltiyFactorForRenewal()": FunctionFragment;
    "pendingGovernor()": FunctionFragment;
    "permissionSubsequentPurchase()": FunctionFragment;
    "renewalPack(uint256,uint256,uint256[])": FunctionFragment;
    "renewalPackForMFS(uint256,uint256,bool)": FunctionFragment;
    "rewardsChipEnergyForMarketing(uint256)": FunctionFragment;
    "setAmountChipEnergyForLevel(uint256[])": FunctionFragment;
    "setPenaltyForRenewal(uint256)": FunctionFragment;
    "setRewardsChipEnergyForMarketing(uint256[])": FunctionFragment;
    "transitGovernance(address,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptGovernance"
      | "activationPack"
      | "amountChipEnergyForLevel"
      | "amountForSwapSFCR"
      | "calcNeedMFSForRenew"
      | "countRenewal"
      | "datesForBuying"
      | "firstActivationPack"
      | "firstActivationPackWithReplace"
      | "governor"
      | "initialize"
      | "lastIndexBuying"
      | "penaltiyFactorForRenewal"
      | "pendingGovernor"
      | "permissionSubsequentPurchase"
      | "renewalPack"
      | "renewalPackForMFS"
      | "rewardsChipEnergyForMarketing"
      | "setAmountChipEnergyForLevel"
      | "setPenaltyForRenewal"
      | "setRewardsChipEnergyForMarketing"
      | "transitGovernance"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activationPack",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "amountChipEnergyForLevel",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "amountForSwapSFCR",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calcNeedMFSForRenew",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "countRenewal",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "datesForBuying",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "firstActivationPack",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "firstActivationPackWithReplace",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastIndexBuying",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "penaltiyFactorForRenewal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "permissionSubsequentPurchase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renewalPack",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renewalPackForMFS",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsChipEnergyForMarketing",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAmountChipEnergyForLevel",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setPenaltyForRenewal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsChipEnergyForMarketing",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transitGovernance",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activationPack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountChipEnergyForLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountForSwapSFCR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcNeedMFSForRenew",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countRenewal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "datesForBuying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstActivationPack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstActivationPackWithReplace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastIndexBuying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "penaltiyFactorForRenewal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permissionSubsequentPurchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renewalPack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renewalPackForMFS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsChipEnergyForMarketing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAmountChipEnergyForLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPenaltyForRenewal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsChipEnergyForMarketing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transitGovernance",
    data: BytesLike
  ): Result;

  events: {
    "GovernanceTransited(address,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "LostMoney(uint256,uint256,uint256,bool)": EventFragment;
    "MFCAmountChipEnergyForLevelIsSetted()": EventFragment;
    "MFCPackIsActivated(uint256,uint256,uint256,uint256)": EventFragment;
    "MFCPackIsRenewed(uint256,uint256,uint256,uint256)": EventFragment;
    "MFCRegistryContractAddressSetted(address)": EventFragment;
    "MFCRewardsChipEnergeForMarketingIsSetted()": EventFragment;
    "MFCTokensMFSIsBuyingInOffer(uint256,uint256)": EventFragment;
    "MFSPenaltyFactorForRenewalIsSetted()": EventFragment;
    "PendingGovernanceTransition(address,address)": EventFragment;
    "RevenueChipEnergy(uint256,uint256,uint256)": EventFragment;
    "RevenueMFS(uint256,uint256,uint256,uint256,bool,bool)": EventFragment;
    "RevenueStable(uint256,uint256,uint256,uint256,bool,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GovernanceTransited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LostMoney"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MFCAmountChipEnergyForLevelIsSetted"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MFCPackIsActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MFCPackIsRenewed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MFCRegistryContractAddressSetted"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MFCRewardsChipEnergeForMarketingIsSetted"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MFCTokensMFSIsBuyingInOffer"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MFSPenaltyFactorForRenewalIsSetted"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PendingGovernanceTransition"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevenueChipEnergy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevenueMFS"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevenueStable"): EventFragment;
}

export interface GovernanceTransitedEventObject {
  governor: string;
  newGovernor: string;
}
export type GovernanceTransitedEvent = TypedEvent<
  [string, string],
  GovernanceTransitedEventObject
>;

export type GovernanceTransitedEventFilter =
  TypedEventFilter<GovernanceTransitedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LostMoneyEventObject {
  accountId: BigNumber;
  fromId: BigNumber;
  amount: BigNumber;
  marketing: boolean;
}
export type LostMoneyEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, boolean],
  LostMoneyEventObject
>;

export type LostMoneyEventFilter = TypedEventFilter<LostMoneyEvent>;

export interface MFCAmountChipEnergyForLevelIsSettedEventObject {}
export type MFCAmountChipEnergyForLevelIsSettedEvent = TypedEvent<
  [],
  MFCAmountChipEnergyForLevelIsSettedEventObject
>;

export type MFCAmountChipEnergyForLevelIsSettedEventFilter =
  TypedEventFilter<MFCAmountChipEnergyForLevelIsSettedEvent>;

export interface MFCPackIsActivatedEventObject {
  user: BigNumber;
  level: BigNumber;
  amount: BigNumber;
  timestampEndPack: BigNumber;
}
export type MFCPackIsActivatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  MFCPackIsActivatedEventObject
>;

export type MFCPackIsActivatedEventFilter =
  TypedEventFilter<MFCPackIsActivatedEvent>;

export interface MFCPackIsRenewedEventObject {
  user: BigNumber;
  level: BigNumber;
  amount: BigNumber;
  timestampEndPack: BigNumber;
}
export type MFCPackIsRenewedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  MFCPackIsRenewedEventObject
>;

export type MFCPackIsRenewedEventFilter =
  TypedEventFilter<MFCPackIsRenewedEvent>;

export interface MFCRegistryContractAddressSettedEventObject {
  registry: string;
}
export type MFCRegistryContractAddressSettedEvent = TypedEvent<
  [string],
  MFCRegistryContractAddressSettedEventObject
>;

export type MFCRegistryContractAddressSettedEventFilter =
  TypedEventFilter<MFCRegistryContractAddressSettedEvent>;

export interface MFCRewardsChipEnergeForMarketingIsSettedEventObject {}
export type MFCRewardsChipEnergeForMarketingIsSettedEvent = TypedEvent<
  [],
  MFCRewardsChipEnergeForMarketingIsSettedEventObject
>;

export type MFCRewardsChipEnergeForMarketingIsSettedEventFilter =
  TypedEventFilter<MFCRewardsChipEnergeForMarketingIsSettedEvent>;

export interface MFCTokensMFSIsBuyingInOfferEventObject {
  user: BigNumber;
  amount: BigNumber;
}
export type MFCTokensMFSIsBuyingInOfferEvent = TypedEvent<
  [BigNumber, BigNumber],
  MFCTokensMFSIsBuyingInOfferEventObject
>;

export type MFCTokensMFSIsBuyingInOfferEventFilter =
  TypedEventFilter<MFCTokensMFSIsBuyingInOfferEvent>;

export interface MFSPenaltyFactorForRenewalIsSettedEventObject {}
export type MFSPenaltyFactorForRenewalIsSettedEvent = TypedEvent<
  [],
  MFSPenaltyFactorForRenewalIsSettedEventObject
>;

export type MFSPenaltyFactorForRenewalIsSettedEventFilter =
  TypedEventFilter<MFSPenaltyFactorForRenewalIsSettedEvent>;

export interface PendingGovernanceTransitionEventObject {
  governor: string;
  newGovernor: string;
}
export type PendingGovernanceTransitionEvent = TypedEvent<
  [string, string],
  PendingGovernanceTransitionEventObject
>;

export type PendingGovernanceTransitionEventFilter =
  TypedEventFilter<PendingGovernanceTransitionEvent>;

export interface RevenueChipEnergyEventObject {
  marketingRefererId: BigNumber;
  userId: BigNumber;
  mRewardChipEnergy: BigNumber;
}
export type RevenueChipEnergyEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  RevenueChipEnergyEventObject
>;

export type RevenueChipEnergyEventFilter =
  TypedEventFilter<RevenueChipEnergyEvent>;

export interface RevenueMFSEventObject {
  accountId: BigNumber;
  fromId: BigNumber;
  amount: BigNumber;
  level: BigNumber;
  activate: boolean;
  marketing: boolean;
}
export type RevenueMFSEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, boolean, boolean],
  RevenueMFSEventObject
>;

export type RevenueMFSEventFilter = TypedEventFilter<RevenueMFSEvent>;

export interface RevenueStableEventObject {
  accountId: BigNumber;
  fromId: BigNumber;
  amount: BigNumber;
  level: BigNumber;
  activate: boolean;
  marketing: boolean;
}
export type RevenueStableEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, boolean, boolean],
  RevenueStableEventObject
>;

export type RevenueStableEventFilter = TypedEventFilter<RevenueStableEvent>;

export interface MetaForce extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MetaForceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptGovernance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    activationPack(
      level: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      forMFS: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    amountChipEnergyForLevel(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    amountForSwapSFCR(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountForSwapSFCR: BigNumber;
        swapedSFCR: BigNumber;
        swapedSFCR2: BigNumber;
      }
    >;

    calcNeedMFSForRenew(
      senderId: PromiseOrValue<BigNumberish>,
      level: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber]] & { prices: [BigNumber, BigNumber] }>;

    countRenewal(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    datesForBuying(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { date: BigNumber; amount: BigNumber }>;

    firstActivationPack(
      estimatedMarketinReferrerId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      forMFS: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    firstActivationPackWithReplace(
      replaceId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      forMFS: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lastIndexBuying(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    penaltiyFactorForRenewal(overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingGovernor(overrides?: CallOverrides): Promise<[string]>;

    permissionSubsequentPurchase(overrides?: CallOverrides): Promise<[boolean]>;

    renewalPack(
      level: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      amountsCurrency: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renewalPackForMFS(
      level: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      withoutConversionStable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardsChipEnergyForMarketing(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setAmountChipEnergyForLevel(
      _amountChipEnergyForLevel: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPenaltyForRenewal(
      _penalty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRewardsChipEnergyForMarketing(
      _rewardsChipEnergyForMarketing: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transitGovernance(
      newGovernor: PromiseOrValue<string>,
      force: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptGovernance(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  activationPack(
    level: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    forMFS: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  amountChipEnergyForLevel(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  amountForSwapSFCR(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amountForSwapSFCR: BigNumber;
      swapedSFCR: BigNumber;
      swapedSFCR2: BigNumber;
    }
  >;

  calcNeedMFSForRenew(
    senderId: PromiseOrValue<BigNumberish>,
    level: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  countRenewal(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  datesForBuying(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { date: BigNumber; amount: BigNumber }>;

  firstActivationPack(
    estimatedMarketinReferrerId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    forMFS: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  firstActivationPackWithReplace(
    replaceId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    forMFS: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  governor(overrides?: CallOverrides): Promise<string>;

  initialize(
    _registry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lastIndexBuying(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  penaltiyFactorForRenewal(overrides?: CallOverrides): Promise<BigNumber>;

  pendingGovernor(overrides?: CallOverrides): Promise<string>;

  permissionSubsequentPurchase(overrides?: CallOverrides): Promise<boolean>;

  renewalPack(
    level: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    amountsCurrency: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renewalPackForMFS(
    level: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    withoutConversionStable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardsChipEnergyForMarketing(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setAmountChipEnergyForLevel(
    _amountChipEnergyForLevel: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPenaltyForRenewal(
    _penalty: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRewardsChipEnergyForMarketing(
    _rewardsChipEnergyForMarketing: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transitGovernance(
    newGovernor: PromiseOrValue<string>,
    force: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptGovernance(overrides?: CallOverrides): Promise<void>;

    activationPack(
      level: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      forMFS: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    amountChipEnergyForLevel(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    amountForSwapSFCR(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountForSwapSFCR: BigNumber;
        swapedSFCR: BigNumber;
        swapedSFCR2: BigNumber;
      }
    >;

    calcNeedMFSForRenew(
      senderId: PromiseOrValue<BigNumberish>,
      level: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    countRenewal(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    datesForBuying(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { date: BigNumber; amount: BigNumber }>;

    firstActivationPack(
      estimatedMarketinReferrerId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      forMFS: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    firstActivationPackWithReplace(
      replaceId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      forMFS: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    governor(overrides?: CallOverrides): Promise<string>;

    initialize(
      _registry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    lastIndexBuying(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    penaltiyFactorForRenewal(overrides?: CallOverrides): Promise<BigNumber>;

    pendingGovernor(overrides?: CallOverrides): Promise<string>;

    permissionSubsequentPurchase(overrides?: CallOverrides): Promise<boolean>;

    renewalPack(
      level: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      amountsCurrency: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    renewalPackForMFS(
      level: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      withoutConversionStable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardsChipEnergyForMarketing(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAmountChipEnergyForLevel(
      _amountChipEnergyForLevel: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setPenaltyForRenewal(
      _penalty: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardsChipEnergyForMarketing(
      _rewardsChipEnergyForMarketing: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    transitGovernance(
      newGovernor: PromiseOrValue<string>,
      force: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "GovernanceTransited(address,address)"(
      governor?: PromiseOrValue<string> | null,
      newGovernor?: PromiseOrValue<string> | null
    ): GovernanceTransitedEventFilter;
    GovernanceTransited(
      governor?: PromiseOrValue<string> | null,
      newGovernor?: PromiseOrValue<string> | null
    ): GovernanceTransitedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LostMoney(uint256,uint256,uint256,bool)"(
      accountId?: PromiseOrValue<BigNumberish> | null,
      fromId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      marketing?: null
    ): LostMoneyEventFilter;
    LostMoney(
      accountId?: PromiseOrValue<BigNumberish> | null,
      fromId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      marketing?: null
    ): LostMoneyEventFilter;

    "MFCAmountChipEnergyForLevelIsSetted()"(): MFCAmountChipEnergyForLevelIsSettedEventFilter;
    MFCAmountChipEnergyForLevelIsSetted(): MFCAmountChipEnergyForLevelIsSettedEventFilter;

    "MFCPackIsActivated(uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<BigNumberish> | null,
      level?: null,
      amount?: null,
      timestampEndPack?: null
    ): MFCPackIsActivatedEventFilter;
    MFCPackIsActivated(
      user?: PromiseOrValue<BigNumberish> | null,
      level?: null,
      amount?: null,
      timestampEndPack?: null
    ): MFCPackIsActivatedEventFilter;

    "MFCPackIsRenewed(uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<BigNumberish> | null,
      level?: null,
      amount?: null,
      timestampEndPack?: null
    ): MFCPackIsRenewedEventFilter;
    MFCPackIsRenewed(
      user?: PromiseOrValue<BigNumberish> | null,
      level?: null,
      amount?: null,
      timestampEndPack?: null
    ): MFCPackIsRenewedEventFilter;

    "MFCRegistryContractAddressSetted(address)"(
      registry?: null
    ): MFCRegistryContractAddressSettedEventFilter;
    MFCRegistryContractAddressSetted(
      registry?: null
    ): MFCRegistryContractAddressSettedEventFilter;

    "MFCRewardsChipEnergeForMarketingIsSetted()"(): MFCRewardsChipEnergeForMarketingIsSettedEventFilter;
    MFCRewardsChipEnergeForMarketingIsSetted(): MFCRewardsChipEnergeForMarketingIsSettedEventFilter;

    "MFCTokensMFSIsBuyingInOffer(uint256,uint256)"(
      user?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): MFCTokensMFSIsBuyingInOfferEventFilter;
    MFCTokensMFSIsBuyingInOffer(
      user?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): MFCTokensMFSIsBuyingInOfferEventFilter;

    "MFSPenaltyFactorForRenewalIsSetted()"(): MFSPenaltyFactorForRenewalIsSettedEventFilter;
    MFSPenaltyFactorForRenewalIsSetted(): MFSPenaltyFactorForRenewalIsSettedEventFilter;

    "PendingGovernanceTransition(address,address)"(
      governor?: PromiseOrValue<string> | null,
      newGovernor?: PromiseOrValue<string> | null
    ): PendingGovernanceTransitionEventFilter;
    PendingGovernanceTransition(
      governor?: PromiseOrValue<string> | null,
      newGovernor?: PromiseOrValue<string> | null
    ): PendingGovernanceTransitionEventFilter;

    "RevenueChipEnergy(uint256,uint256,uint256)"(
      marketingRefererId?: PromiseOrValue<BigNumberish> | null,
      userId?: PromiseOrValue<BigNumberish> | null,
      mRewardChipEnergy?: null
    ): RevenueChipEnergyEventFilter;
    RevenueChipEnergy(
      marketingRefererId?: PromiseOrValue<BigNumberish> | null,
      userId?: PromiseOrValue<BigNumberish> | null,
      mRewardChipEnergy?: null
    ): RevenueChipEnergyEventFilter;

    "RevenueMFS(uint256,uint256,uint256,uint256,bool,bool)"(
      accountId?: PromiseOrValue<BigNumberish> | null,
      fromId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      level?: null,
      activate?: null,
      marketing?: null
    ): RevenueMFSEventFilter;
    RevenueMFS(
      accountId?: PromiseOrValue<BigNumberish> | null,
      fromId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      level?: null,
      activate?: null,
      marketing?: null
    ): RevenueMFSEventFilter;

    "RevenueStable(uint256,uint256,uint256,uint256,bool,bool)"(
      accountId?: PromiseOrValue<BigNumberish> | null,
      fromId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      level?: null,
      activate?: null,
      marketing?: null
    ): RevenueStableEventFilter;
    RevenueStable(
      accountId?: PromiseOrValue<BigNumberish> | null,
      fromId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      level?: null,
      activate?: null,
      marketing?: null
    ): RevenueStableEventFilter;
  };

  estimateGas: {
    acceptGovernance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    activationPack(
      level: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      forMFS: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    amountChipEnergyForLevel(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    amountForSwapSFCR(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcNeedMFSForRenew(
      senderId: PromiseOrValue<BigNumberish>,
      level: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    countRenewal(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    datesForBuying(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    firstActivationPack(
      estimatedMarketinReferrerId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      forMFS: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    firstActivationPackWithReplace(
      replaceId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      forMFS: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lastIndexBuying(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    penaltiyFactorForRenewal(overrides?: CallOverrides): Promise<BigNumber>;

    pendingGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    permissionSubsequentPurchase(overrides?: CallOverrides): Promise<BigNumber>;

    renewalPack(
      level: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      amountsCurrency: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renewalPackForMFS(
      level: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      withoutConversionStable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardsChipEnergyForMarketing(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAmountChipEnergyForLevel(
      _amountChipEnergyForLevel: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPenaltyForRenewal(
      _penalty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRewardsChipEnergyForMarketing(
      _rewardsChipEnergyForMarketing: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transitGovernance(
      newGovernor: PromiseOrValue<string>,
      force: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptGovernance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    activationPack(
      level: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      forMFS: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    amountChipEnergyForLevel(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    amountForSwapSFCR(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcNeedMFSForRenew(
      senderId: PromiseOrValue<BigNumberish>,
      level: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    countRenewal(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    datesForBuying(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    firstActivationPack(
      estimatedMarketinReferrerId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      forMFS: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    firstActivationPackWithReplace(
      replaceId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      forMFS: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lastIndexBuying(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    penaltiyFactorForRenewal(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permissionSubsequentPurchase(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renewalPack(
      level: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      amountsCurrency: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renewalPackForMFS(
      level: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      withoutConversionStable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardsChipEnergyForMarketing(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAmountChipEnergyForLevel(
      _amountChipEnergyForLevel: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPenaltyForRenewal(
      _penalty: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRewardsChipEnergyForMarketing(
      _rewardsChipEnergyForMarketing: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transitGovernance(
      newGovernor: PromiseOrValue<string>,
      force: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
