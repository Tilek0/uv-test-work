/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface CoreInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "acceptGovernance()": FunctionFragment;
    "bigBlockSize()": FunctionFragment;
    "burnMFSPool()": FunctionFragment;
    "calcMFSAmountForUSD(uint256)": FunctionFragment;
    "calcUSDAmountForMFS(uint256)": FunctionFragment;
    "checkRegistrationInMarketing(uint256)": FunctionFragment;
    "clearInfo(uint256)": FunctionFragment;
    "directGiveMFSFromPool(address,uint256)": FunctionFragment;
    "endBigBlock()": FunctionFragment;
    "endSmallBlock()": FunctionFragment;
    "getDateStartSaleOpen()": FunctionFragment;
    "getEnergyConversionFactor()": FunctionFragment;
    "getFreePlace(uint256[])": FunctionFragment;
    "getLevelForNFT(uint256)": FunctionFragment;
    "getMarketingReferrals(uint256)": FunctionFragment;
    "getMarketingReferrer(uint256)": FunctionFragment;
    "getNowPriceFirstPackInMFS()": FunctionFragment;
    "getPriceMFSInUSD()": FunctionFragment;
    "getReferrer(uint256)": FunctionFragment;
    "getRegistrationDate(uint256)": FunctionFragment;
    "getRewardsDirectReferrers()": FunctionFragment;
    "getRewardsMarketingReferrers()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getTimestampEndPack(uint256,uint256)": FunctionFragment;
    "getUserLevel(uint256)": FunctionFragment;
    "getWorkflowStage()": FunctionFragment;
    "giveMFSFromPool(uint256,uint256)": FunctionFragment;
    "giveStableFromPool(uint256,uint256)": FunctionFragment;
    "governor()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "increaseTimestampEndPack(uint256,uint256,uint256)": FunctionFragment;
    "increaseTotalEmission(uint256)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "isPackActive(uint256,uint256)": FunctionFragment;
    "isUserActive(uint256)": FunctionFragment;
    "meanDecreaseMicroBlock()": FunctionFragment;
    "meanSmallBlock()": FunctionFragment;
    "nextWorkflowStage()": FunctionFragment;
    "nowCoeffDecreaseMicroBlock()": FunctionFragment;
    "nowNumberBigBlock()": FunctionFragment;
    "nowNumberSmallBlock()": FunctionFragment;
    "nowPriceFirstPackInMFS()": FunctionFragment;
    "pendingGovernor()": FunctionFragment;
    "priceMFSInUSD()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "replaceUserInMarketingTree(uint256,uint256)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "rewardsDirectReferrers(uint256)": FunctionFragment;
    "rewardsMarketingReferrers(uint256)": FunctionFragment;
    "setEnergyConversionFactor(uint256)": FunctionFragment;
    "setMarketingReferrer(uint256,uint256)": FunctionFragment;
    "setRewardsDirectReferrers(uint256[])": FunctionFragment;
    "setRewardsMarketingReferrers(uint256[])": FunctionFragment;
    "setRewardsReferrers(uint256[],uint256[])": FunctionFragment;
    "setTimestampEndPack(uint256,uint256,uint256)": FunctionFragment;
    "setupTokensInMetapayment()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "totalEmissionMFS()": FunctionFragment;
    "transitGovernance(address,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "acceptGovernance"
      | "bigBlockSize"
      | "burnMFSPool"
      | "calcMFSAmountForUSD"
      | "calcUSDAmountForMFS"
      | "checkRegistrationInMarketing"
      | "clearInfo"
      | "directGiveMFSFromPool"
      | "endBigBlock"
      | "endSmallBlock"
      | "getDateStartSaleOpen"
      | "getEnergyConversionFactor"
      | "getFreePlace"
      | "getLevelForNFT"
      | "getMarketingReferrals"
      | "getMarketingReferrer"
      | "getNowPriceFirstPackInMFS"
      | "getPriceMFSInUSD"
      | "getReferrer"
      | "getRegistrationDate"
      | "getRewardsDirectReferrers"
      | "getRewardsMarketingReferrers"
      | "getRoleAdmin"
      | "getTimestampEndPack"
      | "getUserLevel"
      | "getWorkflowStage"
      | "giveMFSFromPool"
      | "giveStableFromPool"
      | "governor"
      | "grantRole"
      | "hasRole"
      | "increaseTimestampEndPack"
      | "increaseTotalEmission"
      | "initialize"
      | "isPackActive"
      | "isUserActive"
      | "meanDecreaseMicroBlock"
      | "meanSmallBlock"
      | "nextWorkflowStage"
      | "nowCoeffDecreaseMicroBlock"
      | "nowNumberBigBlock"
      | "nowNumberSmallBlock"
      | "nowPriceFirstPackInMFS"
      | "pendingGovernor"
      | "priceMFSInUSD"
      | "renounceRole"
      | "replaceUserInMarketingTree"
      | "revokeRole"
      | "rewardsDirectReferrers"
      | "rewardsMarketingReferrers"
      | "setEnergyConversionFactor"
      | "setMarketingReferrer"
      | "setRewardsDirectReferrers"
      | "setRewardsMarketingReferrers"
      | "setRewardsReferrers"
      | "setTimestampEndPack"
      | "setupTokensInMetapayment"
      | "supportsInterface"
      | "totalEmissionMFS"
      | "transitGovernance"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bigBlockSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burnMFSPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calcMFSAmountForUSD",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calcUSDAmountForMFS",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkRegistrationInMarketing",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "clearInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "directGiveMFSFromPool",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "endBigBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endSmallBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDateStartSaleOpen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEnergyConversionFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFreePlace",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getLevelForNFT",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketingReferrals",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketingReferrer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNowPriceFirstPackInMFS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceMFSInUSD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReferrer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegistrationDate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsDirectReferrers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsMarketingReferrers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimestampEndPack",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserLevel",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWorkflowStage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "giveMFSFromPool",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "giveStableFromPool",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseTimestampEndPack",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseTotalEmission",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPackActive",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isUserActive",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "meanDecreaseMicroBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "meanSmallBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextWorkflowStage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nowCoeffDecreaseMicroBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nowNumberBigBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nowNumberSmallBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nowPriceFirstPackInMFS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceMFSInUSD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "replaceUserInMarketingTree",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsDirectReferrers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsMarketingReferrers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnergyConversionFactor",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketingReferrer",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsDirectReferrers",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsMarketingReferrers",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsReferrers",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimestampEndPack",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setupTokensInMetapayment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalEmissionMFS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transitGovernance",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bigBlockSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnMFSPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcMFSAmountForUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcUSDAmountForMFS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkRegistrationInMarketing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "clearInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "directGiveMFSFromPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endBigBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endSmallBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDateStartSaleOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEnergyConversionFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFreePlace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLevelForNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketingReferrals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketingReferrer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNowPriceFirstPackInMFS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceMFSInUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferrer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegistrationDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsDirectReferrers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsMarketingReferrers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimestampEndPack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWorkflowStage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "giveMFSFromPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "giveStableFromPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseTimestampEndPack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseTotalEmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPackActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "meanDecreaseMicroBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "meanSmallBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextWorkflowStage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nowCoeffDecreaseMicroBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nowNumberBigBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nowNumberSmallBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nowPriceFirstPackInMFS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceMFSInUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceUserInMarketingTree",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsDirectReferrers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsMarketingReferrers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEnergyConversionFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketingReferrer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsDirectReferrers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsMarketingReferrers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsReferrers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimestampEndPack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setupTokensInMetapayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalEmissionMFS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transitGovernance",
    data: BytesLike
  ): Result;

  events: {
    "BigBlockMove(uint256)": EventFragment;
    "GovernanceTransited(address,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MarketingReferrerChanged(uint256,uint256)": EventFragment;
    "PendingGovernanceTransition(address,address)": EventFragment;
    "PoolMFSBurned()": EventFragment;
    "RewardsReferrerSetted()": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SmallBlockMove(uint256)": EventFragment;
    "TimestampEndPackSet(uint256,uint256,uint256)": EventFragment;
    "WorkflowStageMove(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BigBlockMove"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernanceTransited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketingReferrerChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PendingGovernanceTransition"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolMFSBurned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsReferrerSetted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SmallBlockMove"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TimestampEndPackSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WorkflowStageMove"): EventFragment;
}

export interface BigBlockMoveEventObject {
  nowNumberBigBlock: BigNumber;
}
export type BigBlockMoveEvent = TypedEvent<
  [BigNumber],
  BigBlockMoveEventObject
>;

export type BigBlockMoveEventFilter = TypedEventFilter<BigBlockMoveEvent>;

export interface GovernanceTransitedEventObject {
  governor: string;
  newGovernor: string;
}
export type GovernanceTransitedEvent = TypedEvent<
  [string, string],
  GovernanceTransitedEventObject
>;

export type GovernanceTransitedEventFilter =
  TypedEventFilter<GovernanceTransitedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MarketingReferrerChangedEventObject {
  accountId: BigNumber;
  marketingReferrer: BigNumber;
}
export type MarketingReferrerChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  MarketingReferrerChangedEventObject
>;

export type MarketingReferrerChangedEventFilter =
  TypedEventFilter<MarketingReferrerChangedEvent>;

export interface PendingGovernanceTransitionEventObject {
  governor: string;
  newGovernor: string;
}
export type PendingGovernanceTransitionEvent = TypedEvent<
  [string, string],
  PendingGovernanceTransitionEventObject
>;

export type PendingGovernanceTransitionEventFilter =
  TypedEventFilter<PendingGovernanceTransitionEvent>;

export interface PoolMFSBurnedEventObject {}
export type PoolMFSBurnedEvent = TypedEvent<[], PoolMFSBurnedEventObject>;

export type PoolMFSBurnedEventFilter = TypedEventFilter<PoolMFSBurnedEvent>;

export interface RewardsReferrerSettedEventObject {}
export type RewardsReferrerSettedEvent = TypedEvent<
  [],
  RewardsReferrerSettedEventObject
>;

export type RewardsReferrerSettedEventFilter =
  TypedEventFilter<RewardsReferrerSettedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SmallBlockMoveEventObject {
  nowNumberSmallBlock: BigNumber;
}
export type SmallBlockMoveEvent = TypedEvent<
  [BigNumber],
  SmallBlockMoveEventObject
>;

export type SmallBlockMoveEventFilter = TypedEventFilter<SmallBlockMoveEvent>;

export interface TimestampEndPackSetEventObject {
  accountId: BigNumber;
  level: BigNumber;
  timestamp: BigNumber;
}
export type TimestampEndPackSetEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  TimestampEndPackSetEventObject
>;

export type TimestampEndPackSetEventFilter =
  TypedEventFilter<TimestampEndPackSetEvent>;

export interface WorkflowStageMoveEventObject {
  workflowstage: number;
}
export type WorkflowStageMoveEvent = TypedEvent<
  [number],
  WorkflowStageMoveEventObject
>;

export type WorkflowStageMoveEventFilter =
  TypedEventFilter<WorkflowStageMoveEvent>;

export interface Core extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    acceptGovernance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bigBlockSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    burnMFSPool(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calcMFSAmountForUSD(
      amountUSD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    calcUSDAmountForMFS(
      amountMFS: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountUSD: BigNumber }>;

    checkRegistrationInMarketing(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    clearInfo(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    directGiveMFSFromPool(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    endBigBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    endSmallBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDateStartSaleOpen(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEnergyConversionFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFreePlace(
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLevelForNFT(
      _userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMarketingReferrals(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getMarketingReferrer(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNowPriceFirstPackInMFS(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPriceMFSInUSD(overrides?: CallOverrides): Promise<[BigNumber]>;

    getReferrer(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRegistrationDate(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRewardsDirectReferrers(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getRewardsMarketingReferrers(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTimestampEndPack(
      userId: PromiseOrValue<BigNumberish>,
      level: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserLevel(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getWorkflowStage(overrides?: CallOverrides): Promise<[number]>;

    giveMFSFromPool(
      userId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    giveStableFromPool(
      userId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    increaseTimestampEndPack(
      userId: PromiseOrValue<BigNumberish>,
      level: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseTotalEmission(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isPackActive(
      userId: PromiseOrValue<BigNumberish>,
      level: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isUserActive(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    meanDecreaseMicroBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    meanSmallBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextWorkflowStage(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nowCoeffDecreaseMicroBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    nowNumberBigBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    nowNumberSmallBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    nowPriceFirstPackInMFS(overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingGovernor(overrides?: CallOverrides): Promise<[string]>;

    priceMFSInUSD(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    replaceUserInMarketingTree(
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardsDirectReferrers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardsMarketingReferrers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setEnergyConversionFactor(
      _energyConversionFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMarketingReferrer(
      user: PromiseOrValue<BigNumberish>,
      marketingReferrer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRewardsDirectReferrers(
      _rewardsReferrers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRewardsMarketingReferrers(
      _rewardsMarketingReferrers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRewardsReferrers(
      _rewardsDirectReferrers: PromiseOrValue<BigNumberish>[],
      _rewardsMarketingReferrers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTimestampEndPack(
      userId: PromiseOrValue<BigNumberish>,
      level: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setupTokensInMetapayment(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalEmissionMFS(overrides?: CallOverrides): Promise<[BigNumber]>;

    transitGovernance(
      newGovernor: PromiseOrValue<string>,
      force: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  acceptGovernance(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bigBlockSize(overrides?: CallOverrides): Promise<BigNumber>;

  burnMFSPool(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calcMFSAmountForUSD(
    amountUSD: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcUSDAmountForMFS(
    amountMFS: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  checkRegistrationInMarketing(
    userId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  clearInfo(
    userId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  directGiveMFSFromPool(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  endBigBlock(overrides?: CallOverrides): Promise<BigNumber>;

  endSmallBlock(overrides?: CallOverrides): Promise<BigNumber>;

  getDateStartSaleOpen(overrides?: CallOverrides): Promise<BigNumber>;

  getEnergyConversionFactor(overrides?: CallOverrides): Promise<BigNumber>;

  getFreePlace(
    ids: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLevelForNFT(
    _userId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMarketingReferrals(
    userId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getMarketingReferrer(
    userId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNowPriceFirstPackInMFS(overrides?: CallOverrides): Promise<BigNumber>;

  getPriceMFSInUSD(overrides?: CallOverrides): Promise<BigNumber>;

  getReferrer(
    userId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRegistrationDate(
    userId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRewardsDirectReferrers(overrides?: CallOverrides): Promise<BigNumber[]>;

  getRewardsMarketingReferrers(overrides?: CallOverrides): Promise<BigNumber[]>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTimestampEndPack(
    userId: PromiseOrValue<BigNumberish>,
    level: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserLevel(
    userId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getWorkflowStage(overrides?: CallOverrides): Promise<number>;

  giveMFSFromPool(
    userId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  giveStableFromPool(
    userId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  governor(overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  increaseTimestampEndPack(
    userId: PromiseOrValue<BigNumberish>,
    level: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseTotalEmission(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _registry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isPackActive(
    userId: PromiseOrValue<BigNumberish>,
    level: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isUserActive(
    userId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  meanDecreaseMicroBlock(overrides?: CallOverrides): Promise<BigNumber>;

  meanSmallBlock(overrides?: CallOverrides): Promise<BigNumber>;

  nextWorkflowStage(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nowCoeffDecreaseMicroBlock(overrides?: CallOverrides): Promise<BigNumber>;

  nowNumberBigBlock(overrides?: CallOverrides): Promise<BigNumber>;

  nowNumberSmallBlock(overrides?: CallOverrides): Promise<BigNumber>;

  nowPriceFirstPackInMFS(overrides?: CallOverrides): Promise<BigNumber>;

  pendingGovernor(overrides?: CallOverrides): Promise<string>;

  priceMFSInUSD(overrides?: CallOverrides): Promise<BigNumber>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  replaceUserInMarketingTree(
    from: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardsDirectReferrers(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardsMarketingReferrers(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setEnergyConversionFactor(
    _energyConversionFactor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMarketingReferrer(
    user: PromiseOrValue<BigNumberish>,
    marketingReferrer: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRewardsDirectReferrers(
    _rewardsReferrers: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRewardsMarketingReferrers(
    _rewardsMarketingReferrers: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRewardsReferrers(
    _rewardsDirectReferrers: PromiseOrValue<BigNumberish>[],
    _rewardsMarketingReferrers: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTimestampEndPack(
    userId: PromiseOrValue<BigNumberish>,
    level: PromiseOrValue<BigNumberish>,
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setupTokensInMetapayment(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalEmissionMFS(overrides?: CallOverrides): Promise<BigNumber>;

  transitGovernance(
    newGovernor: PromiseOrValue<string>,
    force: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    acceptGovernance(overrides?: CallOverrides): Promise<void>;

    bigBlockSize(overrides?: CallOverrides): Promise<BigNumber>;

    burnMFSPool(overrides?: CallOverrides): Promise<void>;

    calcMFSAmountForUSD(
      amountUSD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcUSDAmountForMFS(
      amountMFS: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkRegistrationInMarketing(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    clearInfo(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    directGiveMFSFromPool(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    endBigBlock(overrides?: CallOverrides): Promise<BigNumber>;

    endSmallBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getDateStartSaleOpen(overrides?: CallOverrides): Promise<BigNumber>;

    getEnergyConversionFactor(overrides?: CallOverrides): Promise<BigNumber>;

    getFreePlace(
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLevelForNFT(
      _userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketingReferrals(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getMarketingReferrer(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNowPriceFirstPackInMFS(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceMFSInUSD(overrides?: CallOverrides): Promise<BigNumber>;

    getReferrer(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegistrationDate(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardsDirectReferrers(overrides?: CallOverrides): Promise<BigNumber[]>;

    getRewardsMarketingReferrers(
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTimestampEndPack(
      userId: PromiseOrValue<BigNumberish>,
      level: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserLevel(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWorkflowStage(overrides?: CallOverrides): Promise<number>;

    giveMFSFromPool(
      userId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    giveStableFromPool(
      userId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    governor(overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseTimestampEndPack(
      userId: PromiseOrValue<BigNumberish>,
      level: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseTotalEmission(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _registry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isPackActive(
      userId: PromiseOrValue<BigNumberish>,
      level: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isUserActive(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    meanDecreaseMicroBlock(overrides?: CallOverrides): Promise<BigNumber>;

    meanSmallBlock(overrides?: CallOverrides): Promise<BigNumber>;

    nextWorkflowStage(overrides?: CallOverrides): Promise<void>;

    nowCoeffDecreaseMicroBlock(overrides?: CallOverrides): Promise<BigNumber>;

    nowNumberBigBlock(overrides?: CallOverrides): Promise<BigNumber>;

    nowNumberSmallBlock(overrides?: CallOverrides): Promise<BigNumber>;

    nowPriceFirstPackInMFS(overrides?: CallOverrides): Promise<BigNumber>;

    pendingGovernor(overrides?: CallOverrides): Promise<string>;

    priceMFSInUSD(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    replaceUserInMarketingTree(
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardsDirectReferrers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsMarketingReferrers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setEnergyConversionFactor(
      _energyConversionFactor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketingReferrer(
      user: PromiseOrValue<BigNumberish>,
      marketingReferrer: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardsDirectReferrers(
      _rewardsReferrers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardsMarketingReferrers(
      _rewardsMarketingReferrers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardsReferrers(
      _rewardsDirectReferrers: PromiseOrValue<BigNumberish>[],
      _rewardsMarketingReferrers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setTimestampEndPack(
      userId: PromiseOrValue<BigNumberish>,
      level: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setupTokensInMetapayment(overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalEmissionMFS(overrides?: CallOverrides): Promise<BigNumber>;

    transitGovernance(
      newGovernor: PromiseOrValue<string>,
      force: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BigBlockMove(uint256)"(nowNumberBigBlock?: null): BigBlockMoveEventFilter;
    BigBlockMove(nowNumberBigBlock?: null): BigBlockMoveEventFilter;

    "GovernanceTransited(address,address)"(
      governor?: PromiseOrValue<string> | null,
      newGovernor?: PromiseOrValue<string> | null
    ): GovernanceTransitedEventFilter;
    GovernanceTransited(
      governor?: PromiseOrValue<string> | null,
      newGovernor?: PromiseOrValue<string> | null
    ): GovernanceTransitedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MarketingReferrerChanged(uint256,uint256)"(
      accountId?: PromiseOrValue<BigNumberish> | null,
      marketingReferrer?: PromiseOrValue<BigNumberish> | null
    ): MarketingReferrerChangedEventFilter;
    MarketingReferrerChanged(
      accountId?: PromiseOrValue<BigNumberish> | null,
      marketingReferrer?: PromiseOrValue<BigNumberish> | null
    ): MarketingReferrerChangedEventFilter;

    "PendingGovernanceTransition(address,address)"(
      governor?: PromiseOrValue<string> | null,
      newGovernor?: PromiseOrValue<string> | null
    ): PendingGovernanceTransitionEventFilter;
    PendingGovernanceTransition(
      governor?: PromiseOrValue<string> | null,
      newGovernor?: PromiseOrValue<string> | null
    ): PendingGovernanceTransitionEventFilter;

    "PoolMFSBurned()"(): PoolMFSBurnedEventFilter;
    PoolMFSBurned(): PoolMFSBurnedEventFilter;

    "RewardsReferrerSetted()"(): RewardsReferrerSettedEventFilter;
    RewardsReferrerSetted(): RewardsReferrerSettedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "SmallBlockMove(uint256)"(
      nowNumberSmallBlock?: null
    ): SmallBlockMoveEventFilter;
    SmallBlockMove(nowNumberSmallBlock?: null): SmallBlockMoveEventFilter;

    "TimestampEndPackSet(uint256,uint256,uint256)"(
      accountId?: PromiseOrValue<BigNumberish> | null,
      level?: null,
      timestamp?: null
    ): TimestampEndPackSetEventFilter;
    TimestampEndPackSet(
      accountId?: PromiseOrValue<BigNumberish> | null,
      level?: null,
      timestamp?: null
    ): TimestampEndPackSetEventFilter;

    "WorkflowStageMove(uint8)"(
      workflowstage?: null
    ): WorkflowStageMoveEventFilter;
    WorkflowStageMove(workflowstage?: null): WorkflowStageMoveEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    acceptGovernance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bigBlockSize(overrides?: CallOverrides): Promise<BigNumber>;

    burnMFSPool(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calcMFSAmountForUSD(
      amountUSD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcUSDAmountForMFS(
      amountMFS: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkRegistrationInMarketing(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clearInfo(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    directGiveMFSFromPool(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    endBigBlock(overrides?: CallOverrides): Promise<BigNumber>;

    endSmallBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getDateStartSaleOpen(overrides?: CallOverrides): Promise<BigNumber>;

    getEnergyConversionFactor(overrides?: CallOverrides): Promise<BigNumber>;

    getFreePlace(
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLevelForNFT(
      _userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketingReferrals(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketingReferrer(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNowPriceFirstPackInMFS(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceMFSInUSD(overrides?: CallOverrides): Promise<BigNumber>;

    getReferrer(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegistrationDate(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardsDirectReferrers(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardsMarketingReferrers(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimestampEndPack(
      userId: PromiseOrValue<BigNumberish>,
      level: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserLevel(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWorkflowStage(overrides?: CallOverrides): Promise<BigNumber>;

    giveMFSFromPool(
      userId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    giveStableFromPool(
      userId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseTimestampEndPack(
      userId: PromiseOrValue<BigNumberish>,
      level: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseTotalEmission(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isPackActive(
      userId: PromiseOrValue<BigNumberish>,
      level: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isUserActive(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    meanDecreaseMicroBlock(overrides?: CallOverrides): Promise<BigNumber>;

    meanSmallBlock(overrides?: CallOverrides): Promise<BigNumber>;

    nextWorkflowStage(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nowCoeffDecreaseMicroBlock(overrides?: CallOverrides): Promise<BigNumber>;

    nowNumberBigBlock(overrides?: CallOverrides): Promise<BigNumber>;

    nowNumberSmallBlock(overrides?: CallOverrides): Promise<BigNumber>;

    nowPriceFirstPackInMFS(overrides?: CallOverrides): Promise<BigNumber>;

    pendingGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    priceMFSInUSD(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    replaceUserInMarketingTree(
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardsDirectReferrers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsMarketingReferrers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setEnergyConversionFactor(
      _energyConversionFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMarketingReferrer(
      user: PromiseOrValue<BigNumberish>,
      marketingReferrer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRewardsDirectReferrers(
      _rewardsReferrers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRewardsMarketingReferrers(
      _rewardsMarketingReferrers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRewardsReferrers(
      _rewardsDirectReferrers: PromiseOrValue<BigNumberish>[],
      _rewardsMarketingReferrers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTimestampEndPack(
      userId: PromiseOrValue<BigNumberish>,
      level: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setupTokensInMetapayment(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalEmissionMFS(overrides?: CallOverrides): Promise<BigNumber>;

    transitGovernance(
      newGovernor: PromiseOrValue<string>,
      force: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    acceptGovernance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bigBlockSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnMFSPool(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calcMFSAmountForUSD(
      amountUSD: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcUSDAmountForMFS(
      amountMFS: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkRegistrationInMarketing(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    clearInfo(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    directGiveMFSFromPool(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    endBigBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endSmallBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDateStartSaleOpen(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEnergyConversionFactor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFreePlace(
      ids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLevelForNFT(
      _userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketingReferrals(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketingReferrer(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNowPriceFirstPackInMFS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceMFSInUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReferrer(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRegistrationDate(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardsDirectReferrers(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardsMarketingReferrers(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimestampEndPack(
      userId: PromiseOrValue<BigNumberish>,
      level: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserLevel(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWorkflowStage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    giveMFSFromPool(
      userId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    giveStableFromPool(
      userId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseTimestampEndPack(
      userId: PromiseOrValue<BigNumberish>,
      level: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseTotalEmission(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _registry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isPackActive(
      userId: PromiseOrValue<BigNumberish>,
      level: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUserActive(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    meanDecreaseMicroBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    meanSmallBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextWorkflowStage(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nowCoeffDecreaseMicroBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nowNumberBigBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nowNumberSmallBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nowPriceFirstPackInMFS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceMFSInUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    replaceUserInMarketingTree(
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardsDirectReferrers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsMarketingReferrers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setEnergyConversionFactor(
      _energyConversionFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMarketingReferrer(
      user: PromiseOrValue<BigNumberish>,
      marketingReferrer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRewardsDirectReferrers(
      _rewardsReferrers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRewardsMarketingReferrers(
      _rewardsMarketingReferrers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRewardsReferrers(
      _rewardsDirectReferrers: PromiseOrValue<BigNumberish>[],
      _rewardsMarketingReferrers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTimestampEndPack(
      userId: PromiseOrValue<BigNumberish>,
      level: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setupTokensInMetapayment(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalEmissionMFS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transitGovernance(
      newGovernor: PromiseOrValue<string>,
      force: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
