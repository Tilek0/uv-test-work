/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface MetaPaymentInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "_getAvailableVestingAmount(address,uint256,uint256)": FunctionFragment;
    "add(address,uint256)": FunctionFragment;
    "blockAccount()": FunctionFragment;
    "changeAccountsBlock(address[],bool)": FunctionFragment;
    "chooseTariff(address,uint8)": FunctionFragment;
    "claim(address)": FunctionFragment;
    "claim(address,uint256)": FunctionFragment;
    "contractBalances(address,address)": FunctionFragment;
    "decreaseBalance(address,uint256,uint256)": FunctionFragment;
    "decreaseBalance(address,uint256,address,uint256)": FunctionFragment;
    "decreaseContractBalance(address,address,uint256)": FunctionFragment;
    "decreaseContractBalance(address,address,address,uint256)": FunctionFragment;
    "deleteReservedAddress(uint256)": FunctionFragment;
    "disableDirectDecrease(uint256)": FunctionFragment;
    "extraordinaryVestingUnlock(address,uint256,uint256)": FunctionFragment;
    "firstMonthPeriods(address,uint256)": FunctionFragment;
    "getAvailableVestingAmount(address,uint256)": FunctionFragment;
    "getAvailableVestingAmountWithDividends(address,uint256)": FunctionFragment;
    "getAvalaibleVestingAmountWithoutClaims(address,uint256)": FunctionFragment;
    "getBalance(address,uint256)": FunctionFragment;
    "getBlockedAccount(uint256)": FunctionFragment;
    "getDirectPaymentStatus(uint256)": FunctionFragment;
    "getFreezeStatusToken(address)": FunctionFragment;
    "getNontransferableStatus(address)": FunctionFragment;
    "getOverrideFirstMonthVestingAmount(address,uint256)": FunctionFragment;
    "getPaymentAddressForId(uint256)": FunctionFragment;
    "getPaymentIdForAddress(address)": FunctionFragment;
    "getReservedAddress(uint256)": FunctionFragment;
    "getReservedId(address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getTariffAmount(address,uint8)": FunctionFragment;
    "getTariffDividendsPerToken(address,uint8)": FunctionFragment;
    "getTariffDuration(address,uint8)": FunctionFragment;
    "getUserTariff(address,uint256)": FunctionFragment;
    "getUserVestingAmountWithoutFirstMonth(address,uint256)": FunctionFragment;
    "getUserVestingLastUpdate(address,uint256)": FunctionFragment;
    "getUserVestingLockedAmount(address,uint256)": FunctionFragment;
    "getVestingAmount(address,uint256)": FunctionFragment;
    "getVestingStartDate(address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "increaseBalance(address,uint256,uint256)": FunctionFragment;
    "increaseBalanceBatch(address,uint256[],uint256[])": FunctionFragment;
    "increaseContractBalance(address,address,uint256)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "isTariffAvailable(address,uint8)": FunctionFragment;
    "metaCore()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "resetVesting()": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "safeDecreaseBalance(address,uint256,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,uint256,uint256,uint256)": FunctionFragment;
    "safeTransferToContract(address,uint256,address,uint256)": FunctionFragment;
    "setBalance(address,uint256,uint256)": FunctionFragment;
    "setDirectPayment(bool)": FunctionFragment;
    "setDisableDirectDecrease(bool)": FunctionFragment;
    "setFreezeStatus(address,bool)": FunctionFragment;
    "setNontransferableStatus(address,bool)": FunctionFragment;
    "setReservedAddress(uint256,address)": FunctionFragment;
    "setReservedAddresses(address[],address[])": FunctionFragment;
    "setVestingBalance(address,uint256,uint256)": FunctionFragment;
    "setVestingFund(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transfer(address,uint256,uint256)": FunctionFragment;
    "transferFrom(address,uint256,uint256,uint256)": FunctionFragment;
    "transferFromContract(address,uint256,address,uint256)": FunctionFragment;
    "transferFromContractBatch(address,uint256[],address,uint256[])": FunctionFragment;
    "transferToContract(address,uint256,address,uint256)": FunctionFragment;
    "unblockAccount(uint256)": FunctionFragment;
    "vestingFund()": FunctionFragment;
    "vestingTariffStartDate()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "_getAvailableVestingAmount"
      | "add"
      | "blockAccount"
      | "changeAccountsBlock"
      | "chooseTariff"
      | "claim(address)"
      | "claim(address,uint256)"
      | "contractBalances"
      | "decreaseBalance(address,uint256,uint256)"
      | "decreaseBalance(address,uint256,address,uint256)"
      | "decreaseContractBalance(address,address,uint256)"
      | "decreaseContractBalance(address,address,address,uint256)"
      | "deleteReservedAddress"
      | "disableDirectDecrease"
      | "extraordinaryVestingUnlock"
      | "firstMonthPeriods"
      | "getAvailableVestingAmount"
      | "getAvailableVestingAmountWithDividends"
      | "getAvalaibleVestingAmountWithoutClaims"
      | "getBalance"
      | "getBlockedAccount"
      | "getDirectPaymentStatus"
      | "getFreezeStatusToken"
      | "getNontransferableStatus"
      | "getOverrideFirstMonthVestingAmount"
      | "getPaymentAddressForId"
      | "getPaymentIdForAddress"
      | "getReservedAddress"
      | "getReservedId"
      | "getRoleAdmin"
      | "getTariffAmount"
      | "getTariffDividendsPerToken"
      | "getTariffDuration"
      | "getUserTariff"
      | "getUserVestingAmountWithoutFirstMonth"
      | "getUserVestingLastUpdate"
      | "getUserVestingLockedAmount"
      | "getVestingAmount"
      | "getVestingStartDate"
      | "grantRole"
      | "hasRole"
      | "increaseBalance"
      | "increaseBalanceBatch"
      | "increaseContractBalance"
      | "initialize"
      | "isTariffAvailable"
      | "metaCore"
      | "renounceRole"
      | "resetVesting"
      | "revokeRole"
      | "safeDecreaseBalance"
      | "safeTransferFrom"
      | "safeTransferToContract"
      | "setBalance"
      | "setDirectPayment"
      | "setDisableDirectDecrease"
      | "setFreezeStatus"
      | "setNontransferableStatus"
      | "setReservedAddress"
      | "setReservedAddresses"
      | "setVestingBalance"
      | "setVestingFund"
      | "supportsInterface"
      | "transfer"
      | "transferFrom"
      | "transferFromContract"
      | "transferFromContractBatch"
      | "transferToContract"
      | "unblockAccount"
      | "vestingFund"
      | "vestingTariffStartDate"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_getAvailableVestingAmount",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "add",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "blockAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeAccountsBlock",
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "chooseTariff",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claim(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claim(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "contractBalances",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseBalance(address,uint256,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseBalance(address,uint256,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseContractBalance(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseContractBalance(address,address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteReservedAddress",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "disableDirectDecrease",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "extraordinaryVestingUnlock",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "firstMonthPeriods",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableVestingAmount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableVestingAmountWithDividends",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvalaibleVestingAmountWithoutClaims",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockedAccount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDirectPaymentStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFreezeStatusToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNontransferableStatus",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOverrideFirstMonthVestingAmount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentAddressForId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentIdForAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReservedAddress",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReservedId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTariffAmount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTariffDividendsPerToken",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTariffDuration",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTariff",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserVestingAmountWithoutFirstMonth",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserVestingLastUpdate",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserVestingLockedAmount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingAmount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingStartDate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseBalance",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseBalanceBatch",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseContractBalance",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTariffAvailable",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "metaCore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "resetVesting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "safeDecreaseBalance",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferToContract",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setBalance",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDirectPayment",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDisableDirectDecrease",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFreezeStatus",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setNontransferableStatus",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setReservedAddress",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setReservedAddresses",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setVestingBalance",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setVestingFund",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromContract",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromContractBatch",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToContract",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unblockAccount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "vestingFund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vestingTariffStartDate",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getAvailableVestingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blockAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeAccountsBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chooseTariff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claim(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claim(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseBalance(address,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseBalance(address,uint256,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseContractBalance(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseContractBalance(address,address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteReservedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableDirectDecrease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extraordinaryVestingUnlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstMonthPeriods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableVestingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableVestingAmountWithDividends",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvalaibleVestingAmountWithoutClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBlockedAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDirectPaymentStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFreezeStatusToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNontransferableStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOverrideFirstMonthVestingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentAddressForId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentIdForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReservedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReservedId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTariffAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTariffDividendsPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTariffDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTariff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserVestingAmountWithoutFirstMonth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserVestingLastUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserVestingLockedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingStartDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseBalanceBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTariffAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "metaCore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeDecreaseBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferToContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDirectPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDisableDirectDecrease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFreezeStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNontransferableStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReservedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReservedAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVestingBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVestingFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromContractBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unblockAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingTariffStartDate",
    data: BytesLike
  ): Result;

  events: {
    "AccountBlockStatusChanged(uint256,bool)": EventFragment;
    "Add(address,address,uint256)": EventFragment;
    "Claim(address,address,uint256)": EventFragment;
    "DirectDecrease(address,address,uint256)": EventFragment;
    "DirectIncrease(address,address,uint256)": EventFragment;
    "DirectPayment(uint256,bool)": EventFragment;
    "DisableDirectDecreaseSet(uint256,bool)": EventFragment;
    "ExtraordinaryVestingUnlock(address,uint256,uint256)": EventFragment;
    "FreezeStatusSet(address,bool)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "InternalContractDecrease(address,address,uint256)": EventFragment;
    "InternalContractIncrease(address,address,uint256)": EventFragment;
    "InternalDecrease(address,uint256,uint256)": EventFragment;
    "InternalIncrease(address,uint256,uint256)": EventFragment;
    "InternalTransfer(address,uint256,uint256,uint256)": EventFragment;
    "InternalTransferFromContract(address,uint256,address,uint256)": EventFragment;
    "InternalTransferToContract(address,uint256,address,uint256)": EventFragment;
    "MigrateStopped(uint256)": EventFragment;
    "NontransferableStatusSet(address,bool)": EventFragment;
    "ReservedDelete(uint256)": EventFragment;
    "ReservedSet(uint256,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "TariffChanged(uint256,uint8,uint8)": EventFragment;
    "VestingClaim(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountBlockStatusChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Add"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DirectDecrease"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DirectIncrease"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DirectPayment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisableDirectDecreaseSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExtraordinaryVestingUnlock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FreezeStatusSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InternalContractDecrease"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InternalContractIncrease"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InternalDecrease"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InternalIncrease"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InternalTransfer"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "InternalTransferFromContract"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InternalTransferToContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MigrateStopped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NontransferableStatusSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReservedDelete"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReservedSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TariffChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VestingClaim"): EventFragment;
}

export interface AccountBlockStatusChangedEventObject {
  userId: BigNumber;
  isBlocked: boolean;
}
export type AccountBlockStatusChangedEvent = TypedEvent<
  [BigNumber, boolean],
  AccountBlockStatusChangedEventObject
>;

export type AccountBlockStatusChangedEventFilter =
  TypedEventFilter<AccountBlockStatusChangedEvent>;

export interface AddEventObject {
  user: string;
  erc20: string;
  amount: BigNumber;
}
export type AddEvent = TypedEvent<[string, string, BigNumber], AddEventObject>;

export type AddEventFilter = TypedEventFilter<AddEvent>;

export interface ClaimEventObject {
  user: string;
  erc20: string;
  amount: BigNumber;
}
export type ClaimEvent = TypedEvent<
  [string, string, BigNumber],
  ClaimEventObject
>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface DirectDecreaseEventObject {
  erc20: string;
  user: string;
  amount: BigNumber;
}
export type DirectDecreaseEvent = TypedEvent<
  [string, string, BigNumber],
  DirectDecreaseEventObject
>;

export type DirectDecreaseEventFilter = TypedEventFilter<DirectDecreaseEvent>;

export interface DirectIncreaseEventObject {
  erc20: string;
  user: string;
  amount: BigNumber;
}
export type DirectIncreaseEvent = TypedEvent<
  [string, string, BigNumber],
  DirectIncreaseEventObject
>;

export type DirectIncreaseEventFilter = TypedEventFilter<DirectIncreaseEvent>;

export interface DirectPaymentEventObject {
  userId: BigNumber;
  isSet: boolean;
}
export type DirectPaymentEvent = TypedEvent<
  [BigNumber, boolean],
  DirectPaymentEventObject
>;

export type DirectPaymentEventFilter = TypedEventFilter<DirectPaymentEvent>;

export interface DisableDirectDecreaseSetEventObject {
  userId: BigNumber;
  isDisable: boolean;
}
export type DisableDirectDecreaseSetEvent = TypedEvent<
  [BigNumber, boolean],
  DisableDirectDecreaseSetEventObject
>;

export type DisableDirectDecreaseSetEventFilter =
  TypedEventFilter<DisableDirectDecreaseSetEvent>;

export interface ExtraordinaryVestingUnlockEventObject {
  token: string;
  userId: BigNumber;
  amount: BigNumber;
}
export type ExtraordinaryVestingUnlockEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ExtraordinaryVestingUnlockEventObject
>;

export type ExtraordinaryVestingUnlockEventFilter =
  TypedEventFilter<ExtraordinaryVestingUnlockEvent>;

export interface FreezeStatusSetEventObject {
  erc20: string;
  isFreeze: boolean;
}
export type FreezeStatusSetEvent = TypedEvent<
  [string, boolean],
  FreezeStatusSetEventObject
>;

export type FreezeStatusSetEventFilter = TypedEventFilter<FreezeStatusSetEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface InternalContractDecreaseEventObject {
  erc20: string;
  contractAddress: string;
  amount: BigNumber;
}
export type InternalContractDecreaseEvent = TypedEvent<
  [string, string, BigNumber],
  InternalContractDecreaseEventObject
>;

export type InternalContractDecreaseEventFilter =
  TypedEventFilter<InternalContractDecreaseEvent>;

export interface InternalContractIncreaseEventObject {
  erc20: string;
  contractAddress: string;
  amount: BigNumber;
}
export type InternalContractIncreaseEvent = TypedEvent<
  [string, string, BigNumber],
  InternalContractIncreaseEventObject
>;

export type InternalContractIncreaseEventFilter =
  TypedEventFilter<InternalContractIncreaseEvent>;

export interface InternalDecreaseEventObject {
  erc20: string;
  userId: BigNumber;
  amount: BigNumber;
}
export type InternalDecreaseEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  InternalDecreaseEventObject
>;

export type InternalDecreaseEventFilter =
  TypedEventFilter<InternalDecreaseEvent>;

export interface InternalIncreaseEventObject {
  erc20: string;
  userId: BigNumber;
  amount: BigNumber;
}
export type InternalIncreaseEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  InternalIncreaseEventObject
>;

export type InternalIncreaseEventFilter =
  TypedEventFilter<InternalIncreaseEvent>;

export interface InternalTransferEventObject {
  erc20: string;
  from: BigNumber;
  to: BigNumber;
  amount: BigNumber;
}
export type InternalTransferEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  InternalTransferEventObject
>;

export type InternalTransferEventFilter =
  TypedEventFilter<InternalTransferEvent>;

export interface InternalTransferFromContractEventObject {
  erc20: string;
  toId: BigNumber;
  contractAddress: string;
  amount: BigNumber;
}
export type InternalTransferFromContractEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  InternalTransferFromContractEventObject
>;

export type InternalTransferFromContractEventFilter =
  TypedEventFilter<InternalTransferFromContractEvent>;

export interface InternalTransferToContractEventObject {
  erc20: string;
  fromId: BigNumber;
  contractAddress: string;
  amount: BigNumber;
}
export type InternalTransferToContractEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  InternalTransferToContractEventObject
>;

export type InternalTransferToContractEventFilter =
  TypedEventFilter<InternalTransferToContractEvent>;

export interface MigrateStoppedEventObject {
  lastId: BigNumber;
}
export type MigrateStoppedEvent = TypedEvent<
  [BigNumber],
  MigrateStoppedEventObject
>;

export type MigrateStoppedEventFilter = TypedEventFilter<MigrateStoppedEvent>;

export interface NontransferableStatusSetEventObject {
  erc20: string;
  isNontransferable: boolean;
}
export type NontransferableStatusSetEvent = TypedEvent<
  [string, boolean],
  NontransferableStatusSetEventObject
>;

export type NontransferableStatusSetEventFilter =
  TypedEventFilter<NontransferableStatusSetEvent>;

export interface ReservedDeleteEventObject {
  userId: BigNumber;
}
export type ReservedDeleteEvent = TypedEvent<
  [BigNumber],
  ReservedDeleteEventObject
>;

export type ReservedDeleteEventFilter = TypedEventFilter<ReservedDeleteEvent>;

export interface ReservedSetEventObject {
  userId: BigNumber;
  extraWallet: string;
}
export type ReservedSetEvent = TypedEvent<
  [BigNumber, string],
  ReservedSetEventObject
>;

export type ReservedSetEventFilter = TypedEventFilter<ReservedSetEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface TariffChangedEventObject {
  userId: BigNumber;
  tariffFrom: number;
  tariffTo: number;
}
export type TariffChangedEvent = TypedEvent<
  [BigNumber, number, number],
  TariffChangedEventObject
>;

export type TariffChangedEventFilter = TypedEventFilter<TariffChangedEvent>;

export interface VestingClaimEventObject {
  erc20: string;
  userId: BigNumber;
  claimAmount: BigNumber;
}
export type VestingClaimEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  VestingClaimEventObject
>;

export type VestingClaimEventFilter = TypedEventFilter<VestingClaimEvent>;

export interface MetaPayment extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MetaPaymentInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    _getAvailableVestingAmount(
      erc20: PromiseOrValue<string>,
      userId: PromiseOrValue<BigNumberish>,
      lastUpdate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        availableVestingAmount: BigNumber;
        dividendAmount: BigNumber;
      }
    >;

    add(
      erc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    blockAccount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeAccountsBlock(
      accounts: PromiseOrValue<string>[],
      toBlock: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    chooseTariff(
      token: PromiseOrValue<string>,
      tariff: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "claim(address)"(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "claim(address,uint256)"(
      erc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contractBalances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "decreaseBalance(address,uint256,uint256)"(
      erc20: PromiseOrValue<string>,
      idUser: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "decreaseBalance(address,uint256,address,uint256)"(
      erc20: PromiseOrValue<string>,
      idUser: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "decreaseContractBalance(address,address,uint256)"(
      erc20: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "decreaseContractBalance(address,address,address,uint256)"(
      erc20: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      principal: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteReservedAddress(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disableDirectDecrease(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    extraordinaryVestingUnlock(
      token: PromiseOrValue<string>,
      userId: PromiseOrValue<BigNumberish>,
      needAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    firstMonthPeriods(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAvailableVestingAmount(
      erc20: PromiseOrValue<string>,
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { availableVestingAmount: BigNumber }>;

    getAvailableVestingAmountWithDividends(
      erc20: PromiseOrValue<string>,
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        availableVestingAmount: BigNumber;
        dividendAmount: BigNumber;
      }
    >;

    getAvalaibleVestingAmountWithoutClaims(
      erc20: PromiseOrValue<string>,
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { availableVestingAmount: BigNumber }>;

    getBalance(
      erc20: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBlockedAccount(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getDirectPaymentStatus(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getFreezeStatusToken(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getNontransferableStatus(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getOverrideFirstMonthVestingAmount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPaymentAddressForId(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPaymentIdForAddress(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReservedAddress(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getReservedId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTariffAmount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTariffDividendsPerToken(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTariffDuration(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserTariff(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getUserVestingAmountWithoutFirstMonth(
      token: PromiseOrValue<string>,
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { userVestingAmount: BigNumber }>;

    getUserVestingLastUpdate(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserVestingLockedAmount(
      erc20: PromiseOrValue<string>,
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { lockedAmount: BigNumber }>;

    getVestingAmount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVestingStartDate(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    increaseBalance(
      erc20: PromiseOrValue<string>,
      idUser: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseBalanceBatch(
      erc20: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    increaseContractBalance(
      erc20: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _metaCore: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isTariffAvailable(
      token: PromiseOrValue<string>,
      tariff: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    metaCore(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resetVesting(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    safeDecreaseBalance(
      erc20: PromiseOrValue<string>,
      idUser: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      erc20: PromiseOrValue<string>,
      idFrom: PromiseOrValue<BigNumberish>,
      idTo: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    safeTransferToContract(
      erc20: PromiseOrValue<string>,
      fromId: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBalance(
      erc20: PromiseOrValue<string>,
      idUser: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDirectPayment(
      directPayment: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDisableDirectDecrease(
      disable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFreezeStatus(
      erc20: PromiseOrValue<string>,
      freeze: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNontransferableStatus(
      erc20: PromiseOrValue<string>,
      nontransferable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReservedAddress(
      userId: PromiseOrValue<BigNumberish>,
      reservedAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReservedAddresses(
      addresses: PromiseOrValue<string>[],
      reservedAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVestingBalance(
      token: PromiseOrValue<string>,
      userId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVestingFund(
      newFund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transfer(
      erc20: PromiseOrValue<string>,
      idTo: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      erc20: PromiseOrValue<string>,
      idFrom: PromiseOrValue<BigNumberish>,
      idTo: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFromContract(
      erc20: PromiseOrValue<string>,
      toId: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFromContractBatch(
      erc20: PromiseOrValue<string>,
      toIds: PromiseOrValue<BigNumberish>[],
      contractAddress: PromiseOrValue<string>,
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferToContract(
      erc20: PromiseOrValue<string>,
      fromId: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unblockAccount(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vestingFund(overrides?: CallOverrides): Promise<[string]>;

    vestingTariffStartDate(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  _getAvailableVestingAmount(
    erc20: PromiseOrValue<string>,
    userId: PromiseOrValue<BigNumberish>,
    lastUpdate: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      availableVestingAmount: BigNumber;
      dividendAmount: BigNumber;
    }
  >;

  add(
    erc20: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  blockAccount(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeAccountsBlock(
    accounts: PromiseOrValue<string>[],
    toBlock: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  chooseTariff(
    token: PromiseOrValue<string>,
    tariff: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "claim(address)"(
    erc20: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "claim(address,uint256)"(
    erc20: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contractBalances(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "decreaseBalance(address,uint256,uint256)"(
    erc20: PromiseOrValue<string>,
    idUser: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "decreaseBalance(address,uint256,address,uint256)"(
    erc20: PromiseOrValue<string>,
    idUser: PromiseOrValue<BigNumberish>,
    principal: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "decreaseContractBalance(address,address,uint256)"(
    erc20: PromiseOrValue<string>,
    contractAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "decreaseContractBalance(address,address,address,uint256)"(
    erc20: PromiseOrValue<string>,
    contractAddress: PromiseOrValue<string>,
    principal: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteReservedAddress(
    userId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disableDirectDecrease(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  extraordinaryVestingUnlock(
    token: PromiseOrValue<string>,
    userId: PromiseOrValue<BigNumberish>,
    needAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  firstMonthPeriods(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAvailableVestingAmount(
    erc20: PromiseOrValue<string>,
    userId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAvailableVestingAmountWithDividends(
    erc20: PromiseOrValue<string>,
    userId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      availableVestingAmount: BigNumber;
      dividendAmount: BigNumber;
    }
  >;

  getAvalaibleVestingAmountWithoutClaims(
    erc20: PromiseOrValue<string>,
    userId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBalance(
    erc20: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBlockedAccount(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getDirectPaymentStatus(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getFreezeStatusToken(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getNontransferableStatus(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getOverrideFirstMonthVestingAmount(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPaymentAddressForId(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getPaymentIdForAddress(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReservedAddress(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getReservedId(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTariffAmount(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTariffDividendsPerToken(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTariffDuration(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserTariff(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getUserVestingAmountWithoutFirstMonth(
    token: PromiseOrValue<string>,
    userId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserVestingLastUpdate(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserVestingLockedAmount(
    erc20: PromiseOrValue<string>,
    userId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVestingAmount(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVestingStartDate(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  increaseBalance(
    erc20: PromiseOrValue<string>,
    idUser: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseBalanceBatch(
    erc20: PromiseOrValue<string>,
    ids: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  increaseContractBalance(
    erc20: PromiseOrValue<string>,
    contractAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _metaCore: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isTariffAvailable(
    token: PromiseOrValue<string>,
    tariff: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  metaCore(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resetVesting(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  safeDecreaseBalance(
    erc20: PromiseOrValue<string>,
    idUser: PromiseOrValue<BigNumberish>,
    principal: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    erc20: PromiseOrValue<string>,
    idFrom: PromiseOrValue<BigNumberish>,
    idTo: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  safeTransferToContract(
    erc20: PromiseOrValue<string>,
    fromId: PromiseOrValue<BigNumberish>,
    contractAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBalance(
    erc20: PromiseOrValue<string>,
    idUser: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDirectPayment(
    directPayment: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDisableDirectDecrease(
    disable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFreezeStatus(
    erc20: PromiseOrValue<string>,
    freeze: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNontransferableStatus(
    erc20: PromiseOrValue<string>,
    nontransferable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReservedAddress(
    userId: PromiseOrValue<BigNumberish>,
    reservedAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReservedAddresses(
    addresses: PromiseOrValue<string>[],
    reservedAddresses: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVestingBalance(
    token: PromiseOrValue<string>,
    userId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVestingFund(
    newFund: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transfer(
    erc20: PromiseOrValue<string>,
    idTo: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    erc20: PromiseOrValue<string>,
    idFrom: PromiseOrValue<BigNumberish>,
    idTo: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFromContract(
    erc20: PromiseOrValue<string>,
    toId: PromiseOrValue<BigNumberish>,
    contractAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFromContractBatch(
    erc20: PromiseOrValue<string>,
    toIds: PromiseOrValue<BigNumberish>[],
    contractAddress: PromiseOrValue<string>,
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferToContract(
    erc20: PromiseOrValue<string>,
    fromId: PromiseOrValue<BigNumberish>,
    contractAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unblockAccount(
    userId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vestingFund(overrides?: CallOverrides): Promise<string>;

  vestingTariffStartDate(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    _getAvailableVestingAmount(
      erc20: PromiseOrValue<string>,
      userId: PromiseOrValue<BigNumberish>,
      lastUpdate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        availableVestingAmount: BigNumber;
        dividendAmount: BigNumber;
      }
    >;

    add(
      erc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    blockAccount(overrides?: CallOverrides): Promise<void>;

    changeAccountsBlock(
      accounts: PromiseOrValue<string>[],
      toBlock: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    chooseTariff(
      token: PromiseOrValue<string>,
      tariff: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "claim(address)"(
      erc20: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "claim(address,uint256)"(
      erc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    contractBalances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "decreaseBalance(address,uint256,uint256)"(
      erc20: PromiseOrValue<string>,
      idUser: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "decreaseBalance(address,uint256,address,uint256)"(
      erc20: PromiseOrValue<string>,
      idUser: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "decreaseContractBalance(address,address,uint256)"(
      erc20: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "decreaseContractBalance(address,address,address,uint256)"(
      erc20: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      principal: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteReservedAddress(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    disableDirectDecrease(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    extraordinaryVestingUnlock(
      token: PromiseOrValue<string>,
      userId: PromiseOrValue<BigNumberish>,
      needAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    firstMonthPeriods(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAvailableVestingAmount(
      erc20: PromiseOrValue<string>,
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAvailableVestingAmountWithDividends(
      erc20: PromiseOrValue<string>,
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        availableVestingAmount: BigNumber;
        dividendAmount: BigNumber;
      }
    >;

    getAvalaibleVestingAmountWithoutClaims(
      erc20: PromiseOrValue<string>,
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalance(
      erc20: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlockedAccount(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getDirectPaymentStatus(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getFreezeStatusToken(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getNontransferableStatus(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getOverrideFirstMonthVestingAmount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPaymentAddressForId(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getPaymentIdForAddress(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReservedAddress(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getReservedId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTariffAmount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTariffDividendsPerToken(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTariffDuration(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserTariff(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getUserVestingAmountWithoutFirstMonth(
      token: PromiseOrValue<string>,
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserVestingLastUpdate(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserVestingLockedAmount(
      erc20: PromiseOrValue<string>,
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestingAmount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestingStartDate(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseBalance(
      erc20: PromiseOrValue<string>,
      idUser: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseBalanceBatch(
      erc20: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    increaseContractBalance(
      erc20: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _metaCore: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isTariffAvailable(
      token: PromiseOrValue<string>,
      tariff: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    metaCore(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    resetVesting(overrides?: CallOverrides): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    safeDecreaseBalance(
      erc20: PromiseOrValue<string>,
      idUser: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      erc20: PromiseOrValue<string>,
      idFrom: PromiseOrValue<BigNumberish>,
      idTo: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferToContract(
      erc20: PromiseOrValue<string>,
      fromId: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBalance(
      erc20: PromiseOrValue<string>,
      idUser: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDirectPayment(
      directPayment: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDisableDirectDecrease(
      disable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFreezeStatus(
      erc20: PromiseOrValue<string>,
      freeze: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setNontransferableStatus(
      erc20: PromiseOrValue<string>,
      nontransferable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReservedAddress(
      userId: PromiseOrValue<BigNumberish>,
      reservedAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReservedAddresses(
      addresses: PromiseOrValue<string>[],
      reservedAddresses: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setVestingBalance(
      token: PromiseOrValue<string>,
      userId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVestingFund(
      newFund: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transfer(
      erc20: PromiseOrValue<string>,
      idTo: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFrom(
      erc20: PromiseOrValue<string>,
      idFrom: PromiseOrValue<BigNumberish>,
      idTo: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFromContract(
      erc20: PromiseOrValue<string>,
      toId: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFromContractBatch(
      erc20: PromiseOrValue<string>,
      toIds: PromiseOrValue<BigNumberish>[],
      contractAddress: PromiseOrValue<string>,
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferToContract(
      erc20: PromiseOrValue<string>,
      fromId: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unblockAccount(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    vestingFund(overrides?: CallOverrides): Promise<string>;

    vestingTariffStartDate(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "AccountBlockStatusChanged(uint256,bool)"(
      userId?: PromiseOrValue<BigNumberish> | null,
      isBlocked?: null
    ): AccountBlockStatusChangedEventFilter;
    AccountBlockStatusChanged(
      userId?: PromiseOrValue<BigNumberish> | null,
      isBlocked?: null
    ): AccountBlockStatusChangedEventFilter;

    "Add(address,address,uint256)"(
      user?: PromiseOrValue<string> | null,
      erc20?: PromiseOrValue<string> | null,
      amount?: null
    ): AddEventFilter;
    Add(
      user?: PromiseOrValue<string> | null,
      erc20?: PromiseOrValue<string> | null,
      amount?: null
    ): AddEventFilter;

    "Claim(address,address,uint256)"(
      user?: PromiseOrValue<string> | null,
      erc20?: PromiseOrValue<string> | null,
      amount?: null
    ): ClaimEventFilter;
    Claim(
      user?: PromiseOrValue<string> | null,
      erc20?: PromiseOrValue<string> | null,
      amount?: null
    ): ClaimEventFilter;

    "DirectDecrease(address,address,uint256)"(
      erc20?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): DirectDecreaseEventFilter;
    DirectDecrease(
      erc20?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): DirectDecreaseEventFilter;

    "DirectIncrease(address,address,uint256)"(
      erc20?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): DirectIncreaseEventFilter;
    DirectIncrease(
      erc20?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): DirectIncreaseEventFilter;

    "DirectPayment(uint256,bool)"(
      userId?: PromiseOrValue<BigNumberish> | null,
      isSet?: null
    ): DirectPaymentEventFilter;
    DirectPayment(
      userId?: PromiseOrValue<BigNumberish> | null,
      isSet?: null
    ): DirectPaymentEventFilter;

    "DisableDirectDecreaseSet(uint256,bool)"(
      userId?: PromiseOrValue<BigNumberish> | null,
      isDisable?: null
    ): DisableDirectDecreaseSetEventFilter;
    DisableDirectDecreaseSet(
      userId?: PromiseOrValue<BigNumberish> | null,
      isDisable?: null
    ): DisableDirectDecreaseSetEventFilter;

    "ExtraordinaryVestingUnlock(address,uint256,uint256)"(
      token?: PromiseOrValue<string> | null,
      userId?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): ExtraordinaryVestingUnlockEventFilter;
    ExtraordinaryVestingUnlock(
      token?: PromiseOrValue<string> | null,
      userId?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): ExtraordinaryVestingUnlockEventFilter;

    "FreezeStatusSet(address,bool)"(
      erc20?: PromiseOrValue<string> | null,
      isFreeze?: null
    ): FreezeStatusSetEventFilter;
    FreezeStatusSet(
      erc20?: PromiseOrValue<string> | null,
      isFreeze?: null
    ): FreezeStatusSetEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "InternalContractDecrease(address,address,uint256)"(
      erc20?: PromiseOrValue<string> | null,
      contractAddress?: PromiseOrValue<string> | null,
      amount?: null
    ): InternalContractDecreaseEventFilter;
    InternalContractDecrease(
      erc20?: PromiseOrValue<string> | null,
      contractAddress?: PromiseOrValue<string> | null,
      amount?: null
    ): InternalContractDecreaseEventFilter;

    "InternalContractIncrease(address,address,uint256)"(
      erc20?: PromiseOrValue<string> | null,
      contractAddress?: PromiseOrValue<string> | null,
      amount?: null
    ): InternalContractIncreaseEventFilter;
    InternalContractIncrease(
      erc20?: PromiseOrValue<string> | null,
      contractAddress?: PromiseOrValue<string> | null,
      amount?: null
    ): InternalContractIncreaseEventFilter;

    "InternalDecrease(address,uint256,uint256)"(
      erc20?: PromiseOrValue<string> | null,
      userId?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): InternalDecreaseEventFilter;
    InternalDecrease(
      erc20?: PromiseOrValue<string> | null,
      userId?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): InternalDecreaseEventFilter;

    "InternalIncrease(address,uint256,uint256)"(
      erc20?: PromiseOrValue<string> | null,
      userId?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): InternalIncreaseEventFilter;
    InternalIncrease(
      erc20?: PromiseOrValue<string> | null,
      userId?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): InternalIncreaseEventFilter;

    "InternalTransfer(address,uint256,uint256,uint256)"(
      erc20?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<BigNumberish> | null,
      to?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): InternalTransferEventFilter;
    InternalTransfer(
      erc20?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<BigNumberish> | null,
      to?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): InternalTransferEventFilter;

    "InternalTransferFromContract(address,uint256,address,uint256)"(
      erc20?: PromiseOrValue<string> | null,
      toId?: PromiseOrValue<BigNumberish> | null,
      contractAddress?: PromiseOrValue<string> | null,
      amount?: null
    ): InternalTransferFromContractEventFilter;
    InternalTransferFromContract(
      erc20?: PromiseOrValue<string> | null,
      toId?: PromiseOrValue<BigNumberish> | null,
      contractAddress?: PromiseOrValue<string> | null,
      amount?: null
    ): InternalTransferFromContractEventFilter;

    "InternalTransferToContract(address,uint256,address,uint256)"(
      erc20?: PromiseOrValue<string> | null,
      fromId?: PromiseOrValue<BigNumberish> | null,
      contractAddress?: PromiseOrValue<string> | null,
      amount?: null
    ): InternalTransferToContractEventFilter;
    InternalTransferToContract(
      erc20?: PromiseOrValue<string> | null,
      fromId?: PromiseOrValue<BigNumberish> | null,
      contractAddress?: PromiseOrValue<string> | null,
      amount?: null
    ): InternalTransferToContractEventFilter;

    "MigrateStopped(uint256)"(lastId?: null): MigrateStoppedEventFilter;
    MigrateStopped(lastId?: null): MigrateStoppedEventFilter;

    "NontransferableStatusSet(address,bool)"(
      erc20?: PromiseOrValue<string> | null,
      isNontransferable?: null
    ): NontransferableStatusSetEventFilter;
    NontransferableStatusSet(
      erc20?: PromiseOrValue<string> | null,
      isNontransferable?: null
    ): NontransferableStatusSetEventFilter;

    "ReservedDelete(uint256)"(
      userId?: PromiseOrValue<BigNumberish> | null
    ): ReservedDeleteEventFilter;
    ReservedDelete(
      userId?: PromiseOrValue<BigNumberish> | null
    ): ReservedDeleteEventFilter;

    "ReservedSet(uint256,address)"(
      userId?: PromiseOrValue<BigNumberish> | null,
      extraWallet?: null
    ): ReservedSetEventFilter;
    ReservedSet(
      userId?: PromiseOrValue<BigNumberish> | null,
      extraWallet?: null
    ): ReservedSetEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "TariffChanged(uint256,uint8,uint8)"(
      userId?: PromiseOrValue<BigNumberish> | null,
      tariffFrom?: PromiseOrValue<BigNumberish> | null,
      tariffTo?: PromiseOrValue<BigNumberish> | null
    ): TariffChangedEventFilter;
    TariffChanged(
      userId?: PromiseOrValue<BigNumberish> | null,
      tariffFrom?: PromiseOrValue<BigNumberish> | null,
      tariffTo?: PromiseOrValue<BigNumberish> | null
    ): TariffChangedEventFilter;

    "VestingClaim(address,uint256,uint256)"(
      erc20?: PromiseOrValue<string> | null,
      userId?: PromiseOrValue<BigNumberish> | null,
      claimAmount?: null
    ): VestingClaimEventFilter;
    VestingClaim(
      erc20?: PromiseOrValue<string> | null,
      userId?: PromiseOrValue<BigNumberish> | null,
      claimAmount?: null
    ): VestingClaimEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    _getAvailableVestingAmount(
      erc20: PromiseOrValue<string>,
      userId: PromiseOrValue<BigNumberish>,
      lastUpdate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    add(
      erc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    blockAccount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeAccountsBlock(
      accounts: PromiseOrValue<string>[],
      toBlock: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    chooseTariff(
      token: PromiseOrValue<string>,
      tariff: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "claim(address)"(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "claim(address,uint256)"(
      erc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contractBalances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "decreaseBalance(address,uint256,uint256)"(
      erc20: PromiseOrValue<string>,
      idUser: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "decreaseBalance(address,uint256,address,uint256)"(
      erc20: PromiseOrValue<string>,
      idUser: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "decreaseContractBalance(address,address,uint256)"(
      erc20: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "decreaseContractBalance(address,address,address,uint256)"(
      erc20: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      principal: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteReservedAddress(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disableDirectDecrease(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    extraordinaryVestingUnlock(
      token: PromiseOrValue<string>,
      userId: PromiseOrValue<BigNumberish>,
      needAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    firstMonthPeriods(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAvailableVestingAmount(
      erc20: PromiseOrValue<string>,
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAvailableVestingAmountWithDividends(
      erc20: PromiseOrValue<string>,
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAvalaibleVestingAmountWithoutClaims(
      erc20: PromiseOrValue<string>,
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalance(
      erc20: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlockedAccount(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDirectPaymentStatus(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFreezeStatusToken(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNontransferableStatus(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOverrideFirstMonthVestingAmount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPaymentAddressForId(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPaymentIdForAddress(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReservedAddress(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReservedId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTariffAmount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTariffDividendsPerToken(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTariffDuration(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserTariff(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserVestingAmountWithoutFirstMonth(
      token: PromiseOrValue<string>,
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserVestingLastUpdate(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserVestingLockedAmount(
      erc20: PromiseOrValue<string>,
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestingAmount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestingStartDate(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseBalance(
      erc20: PromiseOrValue<string>,
      idUser: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseBalanceBatch(
      erc20: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    increaseContractBalance(
      erc20: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _metaCore: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isTariffAvailable(
      token: PromiseOrValue<string>,
      tariff: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    metaCore(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resetVesting(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    safeDecreaseBalance(
      erc20: PromiseOrValue<string>,
      idUser: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    safeTransferFrom(
      erc20: PromiseOrValue<string>,
      idFrom: PromiseOrValue<BigNumberish>,
      idTo: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    safeTransferToContract(
      erc20: PromiseOrValue<string>,
      fromId: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBalance(
      erc20: PromiseOrValue<string>,
      idUser: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDirectPayment(
      directPayment: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDisableDirectDecrease(
      disable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFreezeStatus(
      erc20: PromiseOrValue<string>,
      freeze: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNontransferableStatus(
      erc20: PromiseOrValue<string>,
      nontransferable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReservedAddress(
      userId: PromiseOrValue<BigNumberish>,
      reservedAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReservedAddresses(
      addresses: PromiseOrValue<string>[],
      reservedAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVestingBalance(
      token: PromiseOrValue<string>,
      userId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVestingFund(
      newFund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      erc20: PromiseOrValue<string>,
      idTo: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      erc20: PromiseOrValue<string>,
      idFrom: PromiseOrValue<BigNumberish>,
      idTo: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFromContract(
      erc20: PromiseOrValue<string>,
      toId: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFromContractBatch(
      erc20: PromiseOrValue<string>,
      toIds: PromiseOrValue<BigNumberish>[],
      contractAddress: PromiseOrValue<string>,
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferToContract(
      erc20: PromiseOrValue<string>,
      fromId: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unblockAccount(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vestingFund(overrides?: CallOverrides): Promise<BigNumber>;

    vestingTariffStartDate(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getAvailableVestingAmount(
      erc20: PromiseOrValue<string>,
      userId: PromiseOrValue<BigNumberish>,
      lastUpdate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    add(
      erc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    blockAccount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeAccountsBlock(
      accounts: PromiseOrValue<string>[],
      toBlock: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    chooseTariff(
      token: PromiseOrValue<string>,
      tariff: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "claim(address)"(
      erc20: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "claim(address,uint256)"(
      erc20: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contractBalances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "decreaseBalance(address,uint256,uint256)"(
      erc20: PromiseOrValue<string>,
      idUser: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "decreaseBalance(address,uint256,address,uint256)"(
      erc20: PromiseOrValue<string>,
      idUser: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "decreaseContractBalance(address,address,uint256)"(
      erc20: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "decreaseContractBalance(address,address,address,uint256)"(
      erc20: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      principal: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteReservedAddress(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disableDirectDecrease(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    extraordinaryVestingUnlock(
      token: PromiseOrValue<string>,
      userId: PromiseOrValue<BigNumberish>,
      needAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    firstMonthPeriods(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAvailableVestingAmount(
      erc20: PromiseOrValue<string>,
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAvailableVestingAmountWithDividends(
      erc20: PromiseOrValue<string>,
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAvalaibleVestingAmountWithoutClaims(
      erc20: PromiseOrValue<string>,
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalance(
      erc20: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlockedAccount(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDirectPaymentStatus(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFreezeStatusToken(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNontransferableStatus(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOverrideFirstMonthVestingAmount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPaymentAddressForId(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPaymentIdForAddress(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReservedAddress(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReservedId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTariffAmount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTariffDividendsPerToken(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTariffDuration(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserTariff(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserVestingAmountWithoutFirstMonth(
      token: PromiseOrValue<string>,
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserVestingLastUpdate(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserVestingLockedAmount(
      erc20: PromiseOrValue<string>,
      userId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVestingAmount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVestingStartDate(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseBalance(
      erc20: PromiseOrValue<string>,
      idUser: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseBalanceBatch(
      erc20: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    increaseContractBalance(
      erc20: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _metaCore: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isTariffAvailable(
      token: PromiseOrValue<string>,
      tariff: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    metaCore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resetVesting(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    safeDecreaseBalance(
      erc20: PromiseOrValue<string>,
      idUser: PromiseOrValue<BigNumberish>,
      principal: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      erc20: PromiseOrValue<string>,
      idFrom: PromiseOrValue<BigNumberish>,
      idTo: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    safeTransferToContract(
      erc20: PromiseOrValue<string>,
      fromId: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBalance(
      erc20: PromiseOrValue<string>,
      idUser: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDirectPayment(
      directPayment: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDisableDirectDecrease(
      disable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFreezeStatus(
      erc20: PromiseOrValue<string>,
      freeze: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNontransferableStatus(
      erc20: PromiseOrValue<string>,
      nontransferable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReservedAddress(
      userId: PromiseOrValue<BigNumberish>,
      reservedAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReservedAddresses(
      addresses: PromiseOrValue<string>[],
      reservedAddresses: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVestingBalance(
      token: PromiseOrValue<string>,
      userId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVestingFund(
      newFund: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transfer(
      erc20: PromiseOrValue<string>,
      idTo: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      erc20: PromiseOrValue<string>,
      idFrom: PromiseOrValue<BigNumberish>,
      idTo: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFromContract(
      erc20: PromiseOrValue<string>,
      toId: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFromContractBatch(
      erc20: PromiseOrValue<string>,
      toIds: PromiseOrValue<BigNumberish>[],
      contractAddress: PromiseOrValue<string>,
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferToContract(
      erc20: PromiseOrValue<string>,
      fromId: PromiseOrValue<BigNumberish>,
      contractAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unblockAccount(
      userId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vestingFund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vestingTariffStartDate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
