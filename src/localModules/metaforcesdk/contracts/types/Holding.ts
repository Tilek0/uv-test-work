/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type DepositStruct = {
  holderId: PromiseOrValue<BigNumberish>;
  unholdingAllowed: PromiseOrValue<boolean>;
  entryLevel: PromiseOrValue<BigNumberish>;
  amount: PromiseOrValue<BigNumberish>;
  createdAt: PromiseOrValue<BigNumberish>;
};

export type DepositStructOutput = [
  BigNumber,
  boolean,
  BigNumber,
  BigNumber,
  number
] & {
  holderId: BigNumber;
  unholdingAllowed: boolean;
  entryLevel: BigNumber;
  amount: BigNumber;
  createdAt: number;
};

export interface HoldingInterface extends utils.Interface {
  functions: {
    "acceptGovernance()": FunctionFragment;
    "getDeposit(uint256)": FunctionFragment;
    "getDepositIds(uint256)": FunctionFragment;
    "getHoldingOpened()": FunctionFragment;
    "getOutHMFSLevelFromDeposit(uint256)": FunctionFragment;
    "governor()": FunctionFragment;
    "hMFSToMFS(uint256,uint256)": FunctionFragment;
    "hold(uint256,uint256)": FunctionFragment;
    "holdOnBehalf(uint256,uint256,uint256)": FunctionFragment;
    "initialize(address,uint256[])": FunctionFragment;
    "lockupPeriods(uint256)": FunctionFragment;
    "pendingGovernor()": FunctionFragment;
    "registry()": FunctionFragment;
    "setHoldingOpened(bool)": FunctionFragment;
    "setLockupPeriod(uint256,uint256)": FunctionFragment;
    "transitGovernance(address,bool)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptGovernance"
      | "getDeposit"
      | "getDepositIds"
      | "getHoldingOpened"
      | "getOutHMFSLevelFromDeposit"
      | "governor"
      | "hMFSToMFS"
      | "hold"
      | "holdOnBehalf"
      | "initialize"
      | "lockupPeriods"
      | "pendingGovernor"
      | "registry"
      | "setHoldingOpened"
      | "setLockupPeriod"
      | "transitGovernance"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDeposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositIds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getHoldingOpened",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOutHMFSLevelFromDeposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hMFSToMFS",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "hold",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "holdOnBehalf",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "lockupPeriods",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setHoldingOpened",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLockupPeriod",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transitGovernance",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDeposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDepositIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHoldingOpened",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutHMFSLevelFromDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hMFSToMFS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hold", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "holdOnBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockupPeriods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setHoldingOpened",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLockupPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transitGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "BackMFSInMetaPool(uint256)": EventFragment;
    "GovernanceTransited(address,address)": EventFragment;
    "Hold(uint256,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "PendingGovernanceTransition(address,address)": EventFragment;
    "Unhold(uint256,uint256)": EventFragment;
    "Withdraw(uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BackMFSInMetaPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernanceTransited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Hold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PendingGovernanceTransition"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unhold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface BackMFSInMetaPoolEventObject {
  amount: BigNumber;
}
export type BackMFSInMetaPoolEvent = TypedEvent<
  [BigNumber],
  BackMFSInMetaPoolEventObject
>;

export type BackMFSInMetaPoolEventFilter =
  TypedEventFilter<BackMFSInMetaPoolEvent>;

export interface GovernanceTransitedEventObject {
  governor: string;
  newGovernor: string;
}
export type GovernanceTransitedEvent = TypedEvent<
  [string, string],
  GovernanceTransitedEventObject
>;

export type GovernanceTransitedEventFilter =
  TypedEventFilter<GovernanceTransitedEvent>;

export interface HoldEventObject {
  depositId: BigNumber;
  createdAt: BigNumber;
  amount: BigNumber;
}
export type HoldEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  HoldEventObject
>;

export type HoldEventFilter = TypedEventFilter<HoldEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface PendingGovernanceTransitionEventObject {
  governor: string;
  newGovernor: string;
}
export type PendingGovernanceTransitionEvent = TypedEvent<
  [string, string],
  PendingGovernanceTransitionEventObject
>;

export type PendingGovernanceTransitionEventFilter =
  TypedEventFilter<PendingGovernanceTransitionEvent>;

export interface UnholdEventObject {
  depositId: BigNumber;
  amount: BigNumber;
}
export type UnholdEvent = TypedEvent<[BigNumber, BigNumber], UnholdEventObject>;

export type UnholdEventFilter = TypedEventFilter<UnholdEvent>;

export interface WithdrawEventObject {
  depositId: BigNumber;
  level: BigNumber;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface Holding extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HoldingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptGovernance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getDeposit(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[DepositStructOutput]>;

    getDepositIds(
      holder: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getHoldingOpened(overrides?: CallOverrides): Promise<[boolean]>;

    getOutHMFSLevelFromDeposit(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { levelHMFS: BigNumber }>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    hMFSToMFS(
      entryLevel: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hold(
      entryLevel: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    holdOnBehalf(
      beneficiaryId: PromiseOrValue<BigNumberish>,
      entryLevel: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _registry: PromiseOrValue<string>,
      _lockupPeriods: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lockupPeriods(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pendingGovernor(overrides?: CallOverrides): Promise<[string]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    setHoldingOpened(
      _opened: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLockupPeriod(
      levelNumber: PromiseOrValue<BigNumberish>,
      lockupPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transitGovernance(
      newGovernor: PromiseOrValue<string>,
      force: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _depositId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptGovernance(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getDeposit(
    depositId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<DepositStructOutput>;

  getDepositIds(
    holder: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getHoldingOpened(overrides?: CallOverrides): Promise<boolean>;

  getOutHMFSLevelFromDeposit(
    depositId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  governor(overrides?: CallOverrides): Promise<string>;

  hMFSToMFS(
    entryLevel: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hold(
    entryLevel: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  holdOnBehalf(
    beneficiaryId: PromiseOrValue<BigNumberish>,
    entryLevel: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _registry: PromiseOrValue<string>,
    _lockupPeriods: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lockupPeriods(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingGovernor(overrides?: CallOverrides): Promise<string>;

  registry(overrides?: CallOverrides): Promise<string>;

  setHoldingOpened(
    _opened: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLockupPeriod(
    levelNumber: PromiseOrValue<BigNumberish>,
    lockupPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transitGovernance(
    newGovernor: PromiseOrValue<string>,
    force: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _depositId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptGovernance(overrides?: CallOverrides): Promise<void>;

    getDeposit(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<DepositStructOutput>;

    getDepositIds(
      holder: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getHoldingOpened(overrides?: CallOverrides): Promise<boolean>;

    getOutHMFSLevelFromDeposit(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<string>;

    hMFSToMFS(
      entryLevel: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    hold(
      entryLevel: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    holdOnBehalf(
      beneficiaryId: PromiseOrValue<BigNumberish>,
      entryLevel: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _registry: PromiseOrValue<string>,
      _lockupPeriods: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    lockupPeriods(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingGovernor(overrides?: CallOverrides): Promise<string>;

    registry(overrides?: CallOverrides): Promise<string>;

    setHoldingOpened(
      _opened: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLockupPeriod(
      levelNumber: PromiseOrValue<BigNumberish>,
      lockupPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transitGovernance(
      newGovernor: PromiseOrValue<string>,
      force: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _depositId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BackMFSInMetaPool(uint256)"(amount?: null): BackMFSInMetaPoolEventFilter;
    BackMFSInMetaPool(amount?: null): BackMFSInMetaPoolEventFilter;

    "GovernanceTransited(address,address)"(
      governor?: PromiseOrValue<string> | null,
      newGovernor?: PromiseOrValue<string> | null
    ): GovernanceTransitedEventFilter;
    GovernanceTransited(
      governor?: PromiseOrValue<string> | null,
      newGovernor?: PromiseOrValue<string> | null
    ): GovernanceTransitedEventFilter;

    "Hold(uint256,uint256,uint256)"(
      depositId?: PromiseOrValue<BigNumberish> | null,
      createdAt?: null,
      amount?: null
    ): HoldEventFilter;
    Hold(
      depositId?: PromiseOrValue<BigNumberish> | null,
      createdAt?: null,
      amount?: null
    ): HoldEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "PendingGovernanceTransition(address,address)"(
      governor?: PromiseOrValue<string> | null,
      newGovernor?: PromiseOrValue<string> | null
    ): PendingGovernanceTransitionEventFilter;
    PendingGovernanceTransition(
      governor?: PromiseOrValue<string> | null,
      newGovernor?: PromiseOrValue<string> | null
    ): PendingGovernanceTransitionEventFilter;

    "Unhold(uint256,uint256)"(
      depositId?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): UnholdEventFilter;
    Unhold(
      depositId?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): UnholdEventFilter;

    "Withdraw(uint256,uint256,uint256)"(
      depositId?: PromiseOrValue<BigNumberish> | null,
      level?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      depositId?: PromiseOrValue<BigNumberish> | null,
      level?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    acceptGovernance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getDeposit(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositIds(
      holder: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHoldingOpened(overrides?: CallOverrides): Promise<BigNumber>;

    getOutHMFSLevelFromDeposit(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    hMFSToMFS(
      entryLevel: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hold(
      entryLevel: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    holdOnBehalf(
      beneficiaryId: PromiseOrValue<BigNumberish>,
      entryLevel: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _registry: PromiseOrValue<string>,
      _lockupPeriods: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lockupPeriods(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    setHoldingOpened(
      _opened: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLockupPeriod(
      levelNumber: PromiseOrValue<BigNumberish>,
      lockupPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transitGovernance(
      newGovernor: PromiseOrValue<string>,
      force: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      _depositId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptGovernance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getDeposit(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositIds(
      holder: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHoldingOpened(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOutHMFSLevelFromDeposit(
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hMFSToMFS(
      entryLevel: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hold(
      entryLevel: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    holdOnBehalf(
      beneficiaryId: PromiseOrValue<BigNumberish>,
      entryLevel: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _registry: PromiseOrValue<string>,
      _lockupPeriods: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lockupPeriods(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setHoldingOpened(
      _opened: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLockupPeriod(
      levelNumber: PromiseOrValue<BigNumberish>,
      lockupPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transitGovernance(
      newGovernor: PromiseOrValue<string>,
      force: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _depositId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
